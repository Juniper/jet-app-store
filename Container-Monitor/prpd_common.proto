/**
 * $Id$
 *
 * Copyright (c) 2016, Juniper Networks, Inc.
 * All rights reserved.
 */

syntax = "proto3";

import "jnx_addr.proto";

package routing;

/**
  * ----------------------------------------------------------------------------
  * Different types of return codes to be sent back to client based on the
  * operation was successful or not and if not, possibly more specific reasons
  * as to why it failed.
  * ----------------------------------------------------------------------------
  */
enum ReturnCode {
    // Operation was executed successfully
    RET_SUCCESS        =  0;
    // General failure : operation not executed successfully
    RET_FAILURE        =  1;
    // Entry was not found
    RET_NOT_FOUND      =  2;
    // Invalid input paramters
    RET_INVALID_PARAMS =  3;
}

/*
  * ---------------------------------------------------------------------------
  * Route table 
  * ---------------------------------------------------------------------------
  */

/**
 * The table format allows the client to request the format that the
 * server should use to represent tables in replies sent by the server
 * to the client.
 */
enum RouteTableFormat {

     /** The server will represent tables by name as strings */
     TABLE_STRING  = 0;

     /** The server will represent tables by RPD table ID */
     TABLE_ID      = 1;
}


/*
  * ----------------------------------------------------------------------------
  * Route table name - A string formatted per JUNOS convention.
  * ----------------------------------------------------------------------------
  */

/**
 * Routing table (RIB) name uniquely identifying a route table,
 * formatted as a string per JUNOS convention.
 */
message RouteTableName {
    /** Table name. REQUIRED */
    string name = 1;
}

/*
  * ----------------------------------------------------------------------------
  * Route table identifier - An integer value uniquely identifying a table.
  * ----------------------------------------------------------------------------
  */

/**
 * Routing table identifier as an integer value uniquely identifying a table.
 */
message RouteTableId {
    /** Table identifier. REQUIRED */
    uint32 id = 1;
}

/**
 * Routing table (RIB), which may either be specified as a string or 
 * RPD table ID. 
 */
message RouteTable {
    oneof RtTableFormat {
        /** Table id to which the route belongs */
        RouteTableId    rtt_id    = 1;    
        /** Table name to which the route belongs */
        RouteTableName  rtt_name  = 2;
    }
}

/*
  * ----------------------------------------------------------------------------
  * Route prefix types
  * ----------------------------------------------------------------------------
  */

/**
 * Routing table destination address families.
 */
enum RouteAfType {

     /** Unspecified */
     RT_AF_UNSPEC    =  0;

     /** IPv4 destination prefix */
     RT_AF_INET      =  1;

     /** IPv6 destination prefix */
     RT_AF_INET6     =  2;

     /** IPv4 VPN (L3VPN) destination prefix */
     RT_AF_INETVPN   =  3;

     /** IPv6 VPN (L3VPN) destination prefix */
     RT_AF_INET6VPN  =  4;
}

/** RFC 4364 Route type 0: 2-byte AS and assigned number */
message RdType0 {

    /** 2 byte AS number */
    uint32                  as_number       = 1;
    /** 4 byte assigned number subfield */
    uint32                  assigned_number = 2;
}

/** RFC 4364 Route type 1: IPv4 address and assigned number */
message RdType1 {
    /** 4 byte IP address */
    jnxBase.IpAddress     ip_address      = 1;
    /** 2 byte assigned number subfield */
    uint32                assigned_number = 2;
}

/** RFC 4364 Route type 2: 4-byte AS and assigned number */
message RdType2 {
    /** 4 byte AS number */
    uint32                as_number       = 1;
    /* 2 byte assigned number subfield */
    uint32                assigned_number = 2;
}

/**
 * An RFC 4364 route distinguisher to distinguish customer VPN routes 
 * within the BGP NLRIs. Valid RD can be type 0, type 1, or type 2.
 */
message RouteDistinguisher {
    oneof RdFormat {
        RdType0     rd0 = 1; /** Type 0 RD */
	RdType1     rd1 = 2; /** Type 1 RD */
	RdType2     rd2 = 3; /** Type 2 RD */
    }
}

/**
 * L3VPN route destination address prefix composed of a 
 * route distinguisher (RD) and IP address.
 */
message L3vpnAddress {

    /** Route distinguisher. REQUIRED */
    RouteDistinguisher    rd = 1;

    /** IPv4 or IPv6 VPN customer address. REQUIRED. */
    jnxBase.IpAddress     vpn_addr = 2;
}

/** 
 * Route destination prefix defined for each supported address family
 */
message RoutePrefix {
    oneof RoutePrefixAf {

        /** IPv4 destination prefix */
        jnxBase.IpAddress     inet         = 1;

        /** IPv6 destination prefix */
	jnxBase.IpAddress     inet6        = 2;

        /** IPv4 VPN (L3VPN) destination prefix */
	L3vpnAddress          inetvpn      = 3;

        /** IPv6 VPN (L3VPN) destination prefix */
        L3vpnAddress          inet6vpn     = 4;
    }
}

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: authentication_service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='authentication_service.proto',
  package='authentication',
  syntax='proto3',
  serialized_pb=_b('\n\x1c\x61uthentication_service.proto\x12\x0e\x61uthentication\"F\n\x0cLoginRequest\x12\x11\n\tuser_name\x18\x01 \x01(\t\x12\x10\n\x08password\x18\x02 \x01(\t\x12\x11\n\tclient_id\x18\x03 \x01(\t\"\x1c\n\nLoginReply\x12\x0e\n\x06result\x18\x01 \x01(\x08\x32Q\n\x05Login\x12H\n\nLoginCheck\x12\x1c.authentication.LoginRequest\x1a\x1a.authentication.LoginReply\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_LOGINREQUEST = _descriptor.Descriptor(
  name='LoginRequest',
  full_name='authentication.LoginRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='user_name', full_name='authentication.LoginRequest.user_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='password', full_name='authentication.LoginRequest.password', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='client_id', full_name='authentication.LoginRequest.client_id', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=48,
  serialized_end=118,
)


_LOGINREPLY = _descriptor.Descriptor(
  name='LoginReply',
  full_name='authentication.LoginReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='result', full_name='authentication.LoginReply.result', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=120,
  serialized_end=148,
)

DESCRIPTOR.message_types_by_name['LoginRequest'] = _LOGINREQUEST
DESCRIPTOR.message_types_by_name['LoginReply'] = _LOGINREPLY

LoginRequest = _reflection.GeneratedProtocolMessageType('LoginRequest', (_message.Message,), dict(
  DESCRIPTOR = _LOGINREQUEST,
  __module__ = 'authentication_service_pb2'
  # @@protoc_insertion_point(class_scope:authentication.LoginRequest)
  ))
_sym_db.RegisterMessage(LoginRequest)

LoginReply = _reflection.GeneratedProtocolMessageType('LoginReply', (_message.Message,), dict(
  DESCRIPTOR = _LOGINREPLY,
  __module__ = 'authentication_service_pb2'
  # @@protoc_insertion_point(class_scope:authentication.LoginReply)
  ))
_sym_db.RegisterMessage(LoginReply)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class LoginStub(object):
  """The Login service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.LoginCheck = channel.unary_unary(
        '/authentication.Login/LoginCheck',
        request_serializer=LoginRequest.SerializeToString,
        response_deserializer=LoginReply.FromString,
        )


class LoginServicer(object):
  """The Login service definition.
  """

  def LoginCheck(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_LoginServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'LoginCheck': grpc.unary_unary_rpc_method_handler(
          servicer.LoginCheck,
          request_deserializer=LoginRequest.FromString,
          response_serializer=LoginReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'authentication.Login', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaLoginServicer(object):
  """The Login service definition.
  """
  def LoginCheck(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaLoginStub(object):
  """The Login service definition.
  """
  def LoginCheck(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  LoginCheck.future = None


def beta_create_Login_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('authentication.Login', 'LoginCheck'): LoginRequest.FromString,
  }
  response_serializers = {
    ('authentication.Login', 'LoginCheck'): LoginReply.SerializeToString,
  }
  method_implementations = {
    ('authentication.Login', 'LoginCheck'): face_utilities.unary_unary_inline(servicer.LoginCheck),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_Login_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('authentication.Login', 'LoginCheck'): LoginRequest.SerializeToString,
  }
  response_deserializers = {
    ('authentication.Login', 'LoginCheck'): LoginReply.FromString,
  }
  cardinalities = {
    'LoginCheck': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'authentication.Login', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)

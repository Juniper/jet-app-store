# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: firewall_service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import jnx_addr_pb2 as jnx__addr__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='firewall_service.proto',
  package='acl',
  syntax='proto3',
  serialized_pb=_b('\n\x16\x66irewall_service.proto\x12\x03\x61\x63l\x1a\x0ejnx_addr.proto\"\x1e\n\x0e\x41\x63\x63\x65ssListVoid\x12\x0c\n\x04void\x18\x01 \x01(\t\"\xea\x01\n\x12\x41\x63lPolicerTwoColor\x12$\n\x07\x62w_unit\x18\x01 \x01(\x0e\x32\x13.acl.AclPolicerRate\x12\x11\n\tbandwidth\x18\x02 \x01(\x04\x12,\n\nburst_unit\x18\x03 \x01(\x0e\x32\x18.acl.AclPolicerBurstSize\x12\x12\n\nburst_size\x18\x04 \x01(\x04\x12 \n\x02lp\x18\x05 \x01(\x0e\x32\x14.acl.AclLossPriority\x12\x11\n\tfc_string\x18\x06 \x01(\t\x12$\n\x07\x64iscard\x18\x07 \x01(\x0e\x32\x13.acl.AclBooleanType\"\xe1\x02\n\x1e\x41\x63lPolicerSingleRateThreeColor\x12\x30\n\x13\x63ommitted_rate_unit\x18\x01 \x01(\x0e\x32\x13.acl.AclPolicerRate\x12\x16\n\x0e\x63ommitted_rate\x18\x02 \x01(\x04\x12\x36\n\x14\x63ommitted_burst_unit\x18\x03 \x01(\x0e\x32\x18.acl.AclPolicerBurstSize\x12\x1c\n\x14\x63ommitted_burst_size\x18\x04 \x01(\x04\x12\x19\n\x11\x65xcess_burst_size\x18\x05 \x01(\x04\x12\x33\n\x11\x65xcess_burst_unit\x18\x06 \x01(\x0e\x32\x18.acl.AclPolicerBurstSize\x12$\n\x07\x64iscard\x18\x07 \x01(\x0e\x32\x13.acl.AclBooleanType\x12)\n\ncolor_mode\x18\x08 \x01(\x0e\x32\x15.acl.AclColorModeType\"\xa2\x03\n\x1b\x41\x63lPolicerTwoRateThreeColor\x12\x30\n\x13\x63ommitted_rate_unit\x18\x01 \x01(\x0e\x32\x13.acl.AclPolicerRate\x12\x16\n\x0e\x63ommitted_rate\x18\x02 \x01(\x04\x12\x36\n\x14\x63ommitted_burst_unit\x18\x03 \x01(\x0e\x32\x18.acl.AclPolicerBurstSize\x12\x1c\n\x14\x63ommitted_burst_size\x18\x04 \x01(\x04\x12-\n\x10\x65xcess_rate_unit\x18\x05 \x01(\x0e\x32\x13.acl.AclPolicerRate\x12\x13\n\x0b\x65xcess_rate\x18\x06 \x01(\x04\x12\x33\n\x11\x65xcess_burst_unit\x18\x07 \x01(\x0e\x32\x18.acl.AclPolicerBurstSize\x12\x19\n\x11\x65xcess_burst_size\x18\x08 \x01(\x04\x12$\n\x07\x64iscard\x18\t \x01(\x0e\x32\x13.acl.AclBooleanType\x12)\n\ncolor_mode\x18\n \x01(\x0e\x32\x15.acl.AclColorModeType\"\x81\x03\n\x16\x41\x63lPolicerHeirarchical\x12\x30\n\x13\x61ggregate_rate_unit\x18\x01 \x01(\x0e\x32\x13.acl.AclPolicerRate\x12\x16\n\x0e\x61ggregate_rate\x18\x02 \x01(\x04\x12;\n\x19\x61ggregate_burst_size_unit\x18\x03 \x01(\x0e\x32\x18.acl.AclPolicerBurstSize\x12\x1c\n\x14\x61ggregate_burst_size\x18\x04 \x01(\x04\x12/\n\x12preminum_rate_unit\x18\x05 \x01(\x0e\x32\x13.acl.AclPolicerRate\x12\x14\n\x0cpremium_rate\x18\x06 \x01(\x04\x12\x39\n\x17premium_burst_size_unit\x18\x07 \x01(\x0e\x32\x18.acl.AclPolicerBurstSize\x12\x1a\n\x12premium_burst_size\x18\x08 \x01(\x04\x12$\n\x07\x64iscard\x18\t \x01(\x0e\x32\x13.acl.AclBooleanType\"\xb5\x02\n\x13\x41\x63lPolicerParameter\x12\x36\n\x13two_color_parameter\x18\x01 \x01(\x0b\x32\x17.acl.AclPolicerTwoColorH\x00\x12G\n\x18sr_three_color_parameter\x18\x02 \x01(\x0b\x32#.acl.AclPolicerSingleRateThreeColorH\x00\x12\x44\n\x18tr_three_color_parameter\x18\x03 \x01(\x0b\x32 .acl.AclPolicerTwoRateThreeColorH\x00\x12=\n\x16hierarchical_parameter\x18\x04 \x01(\x0b\x32\x1b.acl.AclPolicerHeirarchicalH\x00\x42\x18\n\x16OneOf_PolicerParameter\"\xb2\x01\n\x11\x41\x63\x63\x65ssListPolicer\x12\x14\n\x0cpolicer_name\x18\x01 \x01(\t\x12)\n\x0cpolicer_type\x18\x02 \x01(\x0e\x32\x13.acl.AclPolicerType\x12*\n\x0cpolicer_flag\x18\x03 \x01(\x0e\x32\x14.acl.AclPolicerFlags\x12\x30\n\x0epolicer_params\x18\x04 \x01(\x0b\x32\x18.acl.AclPolicerParameter\"s\n\x11\x41\x63lMatchIpAddress\x12 \n\x04\x61\x64\x64r\x18\x01 \x01(\x0b\x32\x12.jnxBase.IpAddress\x12\x12\n\nprefix_len\x18\x02 \x01(\r\x12(\n\x08match_op\x18\x03 \x01(\x0e\x32\x16.acl.AclMatchOperation\"R\n\x0c\x41\x63lMatchPort\x12\x0b\n\x03min\x18\x01 \x01(\x05\x12\x0b\n\x03max\x18\x02 \x01(\x05\x12(\n\x08match_op\x18\x03 \x01(\x0e\x32\x16.acl.AclMatchOperation\"|\n\x14\x41\x63lMatchIpPrecedence\x12\x1c\n\x03min\x18\x01 \x01(\x0e\x32\x0f.acl.Precedence\x12\x1c\n\x03max\x18\x02 \x01(\x0e\x32\x0f.acl.Precedence\x12(\n\x08match_op\x18\x03 \x01(\x0e\x32\x16.acl.AclMatchOperation\"V\n\x10\x41\x63lMatchDscpCode\x12\x0b\n\x03min\x18\x01 \x01(\r\x12\x0b\n\x03max\x18\x02 \x01(\r\x12(\n\x08match_op\x18\x03 \x01(\x0e\x32\x16.acl.AclMatchOperation\"V\n\x10\x41\x63lMatchProtocol\x12\x0b\n\x03min\x18\x01 \x01(\r\x12\x0b\n\x03max\x18\x02 \x01(\r\x12(\n\x08match_op\x18\x03 \x01(\x0e\x32\x16.acl.AclMatchOperation\"V\n\x10\x41\x63lMatchIcmpType\x12\x0b\n\x03min\x18\x01 \x01(\r\x12\x0b\n\x03max\x18\x02 \x01(\r\x12(\n\x08match_op\x18\x03 \x01(\x0e\x32\x16.acl.AclMatchOperation\"V\n\x10\x41\x63lMatchIcmpCode\x12\x0b\n\x03min\x18\x01 \x01(\r\x12\x0b\n\x03max\x18\x02 \x01(\r\x12(\n\x08match_op\x18\x03 \x01(\x0e\x32\x16.acl.AclMatchOperation\"T\n\x0e\x41\x63lMatchPktLen\x12\x0b\n\x03min\x18\x01 \x01(\r\x12\x0b\n\x03max\x18\x02 \x01(\r\x12(\n\x08match_op\x18\x03 \x01(\x0e\x32\x16.acl.AclMatchOperation\"Q\n\x0b\x41\x63lMatchTtl\x12\x0b\n\x03min\x18\x01 \x01(\r\x12\x0b\n\x03max\x18\x02 \x01(\r\x12(\n\x08match_op\x18\x03 \x01(\x0e\x32\x16.acl.AclMatchOperation\"\\\n\x16\x41\x63lMatchFragmentOffset\x12\x0b\n\x03min\x18\x01 \x01(\r\x12\x0b\n\x03max\x18\x02 \x01(\r\x12(\n\x08match_op\x18\x03 \x01(\x0e\x32\x16.acl.AclMatchOperation\";\n\x10\x41\x63lActionPolicer\x12\'\n\x07policer\x18\x01 \x01(\x0b\x32\x16.acl.AccessListPolicer\"(\n\x10\x41\x63lActionCounter\x12\x14\n\x0c\x63ounter_name\x18\x01 \x01(\t\"4\n\x18\x41\x63lActionRoutingInstance\x12\x18\n\x10rt_instance_name\x18\x01 \x01(\t\"E\n\x0c\x41\x63lAdjacency\x12#\n\x04type\x18\x01 \x01(\x0e\x32\x15.acl.AclAdjacencyType\x12\x10\n\x08\x61\x63\x65_name\x18\x02 \x01(\t\"]\n\x14\x41\x63lMatchIflNameIndex\x12\x12\n\x08ifl_name\x18\x01 \x01(\tH\x00\x12\x13\n\tifl_index\x18\x02 \x01(\rH\x00\x42\x1c\n\x1a\x41\x63lEntryMatchIflNameFormat\"X\n\x12\x41\x63lMatchFlexOffset\x12\x0b\n\x03min\x18\x01 \x01(\r\x12\x0b\n\x03max\x18\x02 \x01(\r\x12(\n\x08match_op\x18\x03 \x01(\x0e\x32\x16.acl.AclMatchOperation\"\xb5\x01\n\x15\x41\x63lMatchFlexibleRange\x12\x37\n\x0cstart_offset\x18\x01 \x01(\x0e\x32!.acl.AclEntryMatchFlexStartOffest\x12\x12\n\nbit_length\x18\x02 \x01(\r\x12\x12\n\nbit_offset\x18\x03 \x01(\r\x12\x13\n\x0b\x62yte_offset\x18\x04 \x01(\r\x12&\n\x05range\x18\x05 \x01(\x0b\x32\x17.acl.AclMatchFlexOffset\"\x7f\n\x1b\x41\x63lMatchFlexibleOffsetRange\x12\x36\n\x10\x66lex_range_match\x18\x02 \x01(\x0b\x32\x1a.acl.AclMatchFlexibleRangeH\x00\x42(\n&Oneof_AclEntryMatchFlexibleOffsetRange\"\xb1\x01\n\x14\x41\x63lMatchFlexibleMask\x12\x37\n\x0cstart_offset\x18\x01 \x01(\x0e\x32!.acl.AclEntryMatchFlexStartOffest\x12\x12\n\nbit_length\x18\x02 \x01(\r\x12\x12\n\nbit_offset\x18\x03 \x01(\r\x12\x13\n\x0b\x62yte_offset\x18\x04 \x01(\r\x12\x0c\n\x04mask\x18\x05 \x01(\r\x12\x15\n\rprefix_string\x18\x06 \x01(\t\"{\n\x1a\x41\x63lMatchFlexibleOffsetMask\x12\x34\n\x0f\x66lex_mask_match\x18\x02 \x01(\x0b\x32\x19.acl.AclMatchFlexibleMaskH\x00\x42\'\n%Oneof_AclEntryMatchFlexibleOffsetMask\"\xf6\x06\n\x11\x41\x63lEntryMatchInet\x12/\n\x0fmatch_dst_addrs\x18\x01 \x03(\x0b\x32\x16.acl.AclMatchIpAddress\x12/\n\x0fmatch_src_addrs\x18\x02 \x03(\x0b\x32\x16.acl.AclMatchIpAddress\x12*\n\x0fmatch_dst_ports\x18\x03 \x03(\x0b\x32\x11.acl.AclMatchPort\x12*\n\x0fmatch_src_ports\x18\x04 \x03(\x0b\x32\x11.acl.AclMatchPort\x12.\n\x0fmatch_dscp_code\x18\x05 \x03(\x0b\x32\x15.acl.AclMatchDscpCode\x12.\n\x0fmatch_protocols\x18\x06 \x03(\x0b\x32\x15.acl.AclMatchProtocol\x12.\n\x0fmatch_icmp_type\x18\x07 \x03(\x0b\x32\x15.acl.AclMatchIcmpType\x12.\n\x0fmatch_icmp_code\x18\x08 \x03(\x0b\x32\x15.acl.AclMatchIcmpCode\x12*\n\rmatch_pkt_len\x18\t \x03(\x0b\x32\x13.acl.AclMatchPktLen\x12#\n\tmatch_ttl\x18\n \x03(\x0b\x32\x10.acl.AclMatchTtl\x12-\n\x0e\x66ragment_flags\x18\x0b \x01(\x0e\x32\x15.acl.AclFragmentFlags\x12\x36\n\x11match_frag_offset\x18\x0c \x03(\x0b\x32\x1b.acl.AclMatchFragmentOffset\x12,\n\tifl_names\x18\r \x03(\x0b\x32\x19.acl.AclMatchIflNameIndex\x12\x36\n\x13match_ip_precedence\x18\x0e \x03(\x0b\x32\x19.acl.AclMatchIpPrecedence\x12+\n\x0bmatch_addrs\x18\x0f \x03(\x0b\x32\x16.acl.AclMatchIpAddress\x12&\n\x0bmatch_ports\x18\x10 \x03(\x0b\x32\x11.acl.AclMatchPort\x12:\n\x10match_flex_range\x18\x11 \x03(\x0b\x32 .acl.AclMatchFlexibleOffsetRange\x12\x38\n\x0fmatch_flex_mask\x18\x12 \x03(\x0b\x32\x1f.acl.AclMatchFlexibleOffsetMask\"\x96\x02\n\x1d\x41\x63lEntryInetTerminatingAction\x12,\n\raction_accept\x18\x01 \x01(\x0e\x32\x13.acl.AclBooleanTypeH\x00\x12-\n\x0e\x61\x63tion_discard\x18\x02 \x01(\x0e\x32\x13.acl.AclBooleanTypeH\x00\x12\x38\n\raction_reject\x18\x03 \x01(\x0e\x32\x1f.acl.AclEntryActionRejectReasonH\x00\x12\x37\n\x0e\x61\x63tion_rt_inst\x18\x04 \x01(\x0b\x32\x1d.acl.AclActionRoutingInstanceH\x00\x42%\n#Oneof_AclEntryInetTerminatingAction\"\xae\x02\n AclEntryInetNonTerminatingAction\x12+\n\x0c\x61\x63tion_count\x18\x01 \x01(\x0b\x32\x15.acl.AclActionCounter\x12\'\n\naction_log\x18\x02 \x01(\x0e\x32\x13.acl.AclBooleanType\x12*\n\raction_syslog\x18\x03 \x01(\x0e\x32\x13.acl.AclBooleanType\x12-\n\x0e\x61\x63tion_policer\x18\x04 \x01(\x0b\x32\x15.acl.AclActionPolicer\x12*\n\raction_sample\x18\x05 \x01(\x0e\x32\x13.acl.AclBooleanType\x12-\n\x10\x61\x63tion_next_term\x18\x06 \x01(\x0e\x32\x13.acl.AclBooleanType\"\x85\x01\n\x12\x41\x63lEntryInetAction\x12\x39\n\nactions_nt\x18\x01 \x01(\x0b\x32%.acl.AclEntryInetNonTerminatingAction\x12\x34\n\x08\x61\x63tion_t\x18\x02 \x01(\x0b\x32\".acl.AclEntryInetTerminatingAction\"\xc1\x01\n\x0c\x41\x63lInetEntry\x12\x10\n\x08\x61\x63\x65_name\x18\x01 \x01(\t\x12&\n\x06\x61\x63\x65_op\x18\x02 \x01(\x0e\x32\x16.acl.AclEntryOperation\x12$\n\tadjacency\x18\x03 \x01(\x0b\x32\x11.acl.AclAdjacency\x12\'\n\x07matches\x18\x04 \x01(\x0b\x32\x16.acl.AclEntryMatchInet\x12(\n\x07\x61\x63tions\x18\x05 \x01(\x0b\x32\x17.acl.AclEntryInetAction\"E\n\x08\x41\x63lEntry\x12\'\n\ninet_entry\x18\x01 \x01(\x0b\x32\x11.acl.AclInetEntryH\x00\x42\x10\n\x0eOneOf_AclEntry\"\xbc\x01\n\nAccessList\x12\x10\n\x08\x61\x63l_name\x18\x01 \x01(\t\x12&\n\x08\x61\x63l_type\x18\x02 \x01(\x0e\x32\x14.acl.AccessListTypes\x12+\n\nacl_family\x18\x03 \x01(\x0e\x32\x17.acl.AccessListFamilies\x12&\n\x08\x61\x63l_flag\x18\x04 \x01(\x0e\x32\x14.acl.AccessListFlags\x12\x1f\n\x08\x61\x63\x65_list\x18\x05 \x03(\x0b\x32\r.acl.AclEntry\"G\n\x11\x41\x63\x63\x65ssListCounter\x12\x1c\n\x03\x61\x63l\x18\x01 \x01(\x0b\x32\x0f.acl.AccessList\x12\x14\n\x0c\x63ounter_name\x18\x02 \x01(\t\"M\n\x15\x41\x63\x63\x65ssListCounterBulk\x12\x1c\n\x03\x61\x63l\x18\x01 \x01(\x0b\x32\x0f.acl.AccessList\x12\x16\n\x0estarting_index\x18\x02 \x01(\r\"B\n\x16\x41\x63\x63\x65ssListReturnStatus\x12(\n\x06status\x18\x01 \x01(\x0e\x32\x18.acl.AccessListReturnVal\"v\n\x14\x41\x63\x63\x65ssListCounterVal\x12\x14\n\x0c\x63ounter_name\x18\x01 \x01(\t\x12(\n\x06status\x18\x02 \x01(\x0e\x32\x18.acl.AccessListReturnVal\x12\r\n\x05\x62ytes\x18\x03 \x01(\x04\x12\x0f\n\x07packets\x18\x04 \x01(\x04\"\xd1\x01\n\x11\x41\x63\x63\x65ssListObjBind\x12\x1c\n\x03\x61\x63l\x18\x01 \x01(\x0b\x32\x0f.acl.AccessList\x12,\n\x08obj_type\x18\x02 \x01(\x0e\x32\x1a.acl.AccessListBindObjType\x12\x13\n\x0b\x62ind_object\x18\x03 \x01(\t\x12-\n\x0e\x62ind_direction\x18\x04 \x01(\x0e\x32\x15.acl.AclBindDirection\x12,\n\x0b\x62ind_family\x18\x05 \x01(\x0e\x32\x17.acl.AccessListFamilies*-\n\x0e\x41\x63lBooleanType\x12\r\n\tACL_FALSE\x10\x00\x12\x0c\n\x08\x41\x43L_TRUE\x10\x01*a\n\x11\x41\x63lMatchOperation\x12\x18\n\x14\x41\x43L_MATCH_OP_INVALID\x10\x00\x12\x16\n\x12\x41\x43L_MATCH_OP_EQUAL\x10\x01\x12\x1a\n\x16\x41\x43L_MATCH_OP_NOT_EQUAL\x10\x02*\xb1\x01\n\x0e\x41\x63lPolicerType\x12\x17\n\x13\x41\x43L_POLICER_INVALID\x10\x00\x12\x19\n\x15\x41\x43L_TWO_COLOR_POLICER\x10\x01\x12\'\n#ACL_SINGLE_RATE_THREE_COLOR_POLICER\x10\x02\x12$\n ACL_TWO_RATE_THREE_COLOR_POLICER\x10\x03\x12\x1c\n\x18\x41\x43L_HIERARCHICAL_POLICER\x10\x04*y\n\x0f\x41\x63lPolicerFlags\x12\x1c\n\x18\x41\x43L_POLICER_FLAG_INVALID\x10\x00\x12\"\n\x1e\x41\x43L_POLICER_FLAG_TERM_SPECIFIC\x10\x01\x12$\n ACL_POLICER_FLAG_FILTER_SPECIFIC\x10\x02*\x99\x01\n\x0e\x41\x63lPolicerRate\x12\x1c\n\x18\x41\x43L_POLICER_RATE_INVALID\x10\x00\x12\x18\n\x14\x41\x43L_POLICER_RATE_BPS\x10\x01\x12\x19\n\x15\x41\x43L_POLICER_RATE_KBPS\x10\x02\x12\x19\n\x15\x41\x43L_POLICER_RATE_MBPS\x10\x03\x12\x19\n\x15\x41\x43L_POLICER_RATE_GBPS\x10\x04*\xc0\x01\n\x13\x41\x63lPolicerBurstSize\x12\"\n\x1e\x41\x43L_POLICER_BURST_SIZE_INVALID\x10\x00\x12\x1f\n\x1b\x41\x43L_POLICER_BURST_SIZE_BYTE\x10\x01\x12 \n\x1c\x41\x43L_POLICER_BURST_SIZE_KBYTE\x10\x02\x12 \n\x1c\x41\x43L_POLICER_BURST_SIZE_MBYTE\x10\x03\x12 \n\x1c\x41\x43L_POLICER_BURST_SIZE_GBYTE\x10\x04*n\n\x10\x41\x63lColorModeType\x12\x1a\n\x16\x41\x43L_COLOR_MODE_INVALID\x10\x00\x12\x1e\n\x1a\x41\x43L_COLOR_MODE_COLOR_BLIND\x10\x01\x12\x1e\n\x1a\x41\x43L_COLOR_MODE_COLOR_AWARE\x10\x02*\xac\x01\n\x0f\x41\x63lLossPriority\x12\x1d\n\x19\x41\x43L_LOSS_PRIORITY_INVALID\x10\x00\x12\x1a\n\x16\x41\x43L_LOSS_PRIORITY_HIGH\x10\x01\x12!\n\x1d\x41\x43L_LOSS_PRIORITY_MEDIUM_HIGH\x10\x02\x12 \n\x1c\x41\x43L_LOSS_PRIORITY_MEDIUM_LOW\x10\x03\x12\x19\n\x15\x41\x43L_LOSS_PRIORITY_LOW\x10\x04*\xd6\x05\n\x1a\x41\x63lEntryActionRejectReason\x12\x31\n-ACL_ACTION_REJECT_ADMINISTRATIVELY_PROHIBITED\x10\x00\x12\"\n\x1e\x41\x43L_ACTION_REJECT_BAD_HOST_TOS\x10\x01\x12%\n!ACL_ACTION_REJECT_BAD_NETWORK_TOS\x10\x02\x12*\n&ACL_ACTION_REJECT_FRAGMENTATION_NEEDED\x10\x03\x12%\n!ACL_ACTION_REJECT_HOST_PROHIBITED\x10\x04\x12\"\n\x1e\x41\x43L_ACTION_REJECT_HOST_UNKNOWN\x10\x05\x12&\n\"ACL_ACTION_REJECT_HOST_UNREACHABLE\x10\x06\x12(\n$ACL_ACTION_REJECT_NETWORK_PROHIBITED\x10\x07\x12%\n!ACL_ACTION_REJECT_NETWORK_UNKNOWN\x10\x08\x12)\n%ACL_ACTION_REJECT_NETWORK_UNREACHABLE\x10\t\x12&\n\"ACL_ACTION_REJECT_PORT_UNREACHABLE\x10\n\x12\'\n#ACL_ACTION_REJECT_PRECEDENCE_CUTOFF\x10\x0b\x12*\n&ACL_ACTION_REJECT_PRECEDENCE_VIOLATION\x10\x0c\x12*\n&ACL_ACTION_REJECT_PROTOCOL_UNREACHABLE\x10\r\x12*\n&ACL_ACTION_REJECT_SOURCE_HOST_ISOLATED\x10\x0e\x12)\n%ACL_ACTION_REJECT_SOURCE_ROUTE_FAILED\x10\x0f\x12\x1f\n\x1b\x41\x43L_ACTION_REJECT_TCP_RESET\x10\x10*\x84\x01\n\x10\x41\x63lFragmentFlags\x12\x15\n\x11\x41\x43L_FRAGMENT_NONE\x10\x00\x12\x15\n\x11\x41\x43L_DONT_FRAGMENT\x10\x01\x12\x13\n\x0f\x41\x43L_IS_FRAGMENT\x10\x02\x12\x16\n\x12\x41\x43L_FIRST_FRAGMENT\x10\x03\x12\x15\n\x11\x41\x43L_LAST_FRAGMENT\x10\x04*\xf6\x01\n\nPrecedence\x12\x18\n\x14\x41\x43L_PRECENCE_ROUTINE\x10\x00\x12\x19\n\x15\x41\x43L_PRECENCE_PRIORITY\x10\x01\x12\x1a\n\x16\x41\x43L_PRECENCE_IMMEDIATE\x10\x02\x12\x16\n\x12\x41\x43L_PRECENCE_FLASH\x10\x03\x12\x1f\n\x1b\x41\x43L_PRECENCE_FLASH_OVERRIDE\x10\x04\x12\x1d\n\x19\x41\x43L_PRECENCE_CRITICAL_ECP\x10\x05\x12!\n\x1d\x41\x43L_PRECENCE_INTERNET_CONTROL\x10\x06\x12\x1c\n\x18\x41\x43L_PRECENCE_NET_CONTROL\x10\x07*\x92\x01\n\x11\x41\x63lEntryOperation\x12\x1f\n\x1b\x41\x43L_ENTRY_OPERATION_INVALID\x10\x00\x12\x1b\n\x17\x41\x43L_ENTRY_OPERATION_ADD\x10\x01\x12\x1e\n\x1a\x41\x43L_ENTRY_OPERATION_DELETE\x10\x02\x12\x1f\n\x1b\x41\x43L_ENTRY_OPERATION_REPLACE\x10\x03*]\n\x10\x41\x63lAdjacencyType\x12\x16\n\x12\x41\x43L_ADJACENCY_NONE\x10\x00\x12\x17\n\x13\x41\x43L_ADJACENCY_AFTER\x10\x01\x12\x18\n\x14\x41\x43L_ADJACENCY_BEFORE\x10\x02*\xb1\x01\n\x1c\x41\x63lEntryMatchFlexStartOffest\x12!\n\x1d\x41\x43L_FLEX_MATCH_OFFSET_INVALID\x10\x00\x12%\n!ACL_FLEX_MATCH_OFFSET_LAYER_THREE\x10\x01\x12$\n ACL_FLEX_MATCH_OFFSET_LAYER_FOUR\x10\x02\x12!\n\x1d\x41\x43L_FLEX_MATCH_OFFSET_PAYLOAD\x10\x03*=\n\x0f\x41\x63\x63\x65ssListTypes\x12\x14\n\x10\x41\x43L_TYPE_INVALID\x10\x00\x12\x14\n\x10\x41\x43L_TYPE_CLASSIC\x10\x01*\xc5\x01\n\x12\x41\x63\x63\x65ssListFamilies\x12\x16\n\x12\x41\x43L_FAMILY_INVALID\x10\x00\x12\x13\n\x0f\x41\x43L_FAMILY_INET\x10\x01\x12\x14\n\x10\x41\x43L_FAMILY_INET6\x10\x02\x12\x11\n\rACL_FAMILY_ES\x10\x03\x12\x13\n\x0f\x41\x43L_FAMILY_VPLS\x10\x04\x12\x1b\n\x17\x41\x43L_FAMILY_MULTISERVICE\x10\x05\x12\x12\n\x0e\x41\x43L_FAMILY_CCC\x10\x06\x12\x13\n\x0f\x41\x43L_FAMILY_MPLS\x10\x07*%\n\x0f\x41\x63\x63\x65ssListFlags\x12\x12\n\x0e\x41\x43L_FLAGS_NONE\x10\x00*o\n\x10\x41\x63lBindDirection\x12\x1e\n\x1a\x41\x43L_BIND_DIRECTION_INVALID\x10\x00\x12\x1c\n\x18\x41\x43L_BIND_DIRECTION_INPUT\x10\x01\x12\x1d\n\x19\x41\x43L_BIND_DIRECTION_OUTPUT\x10\x02*\xd8\x01\n\x13\x41\x63\x63\x65ssListReturnVal\x12\x12\n\x0e\x41\x43L_STATUS_EOK\x10\x00\x12\x1b\n\x17\x41\x43L_STATUS_NULL_MESSAGE\x10\x01\x12\x1f\n\x1b\x41\x43L_STATUS_EINVALID_MESSAGE\x10\x02\x12\x18\n\x14\x41\x43L_STATUS_EINTERNAL\x10\x03\x12\x1e\n\x1a\x41\x43L_STATUS_EUNSUPPORTED_OP\x10\x04\x12\x1a\n\x16\x41\x43L_STATUS_NO_RESOURCE\x10\x05\x12\x19\n\x15\x41\x43L_STATUS_BS_TIMEOUT\x10\x06*W\n\x15\x41\x63\x63\x65ssListBindObjType\x12\x1d\n\x19\x41\x43L_BIND_OBJ_TYPE_INVALID\x10\x00\x12\x1f\n\x1b\x41\x43L_BIND_OBJ_TYPE_INTERFACE\x10\x01\x32\xa3\t\n\nAclService\x12?\n\rAccessListAdd\x12\x0f.acl.AccessList\x1a\x1b.acl.AccessListReturnStatus\"\x00\x12\x42\n\x10\x41\x63\x63\x65ssListDelete\x12\x0f.acl.AccessList\x1a\x1b.acl.AccessListReturnStatus\"\x00\x12\x42\n\x10\x41\x63\x63\x65ssListChange\x12\x0f.acl.AccessList\x1a\x1b.acl.AccessListReturnStatus\"\x00\x12J\n\x11\x41\x63\x63\x65ssListBindAdd\x12\x16.acl.AccessListObjBind\x1a\x1b.acl.AccessListReturnStatus\"\x00\x12M\n\x14\x41\x63\x63\x65ssListBindDelete\x12\x16.acl.AccessListObjBind\x1a\x1b.acl.AccessListReturnStatus\"\x00\x12M\n\x14\x41\x63\x63\x65ssListPolicerAdd\x12\x16.acl.AccessListPolicer\x1a\x1b.acl.AccessListReturnStatus\"\x00\x12Q\n\x18\x41\x63\x63\x65ssListPolicerReplace\x12\x16.acl.AccessListPolicer\x1a\x1b.acl.AccessListReturnStatus\"\x00\x12P\n\x17\x41\x63\x63\x65ssListPolicerDelete\x12\x16.acl.AccessListPolicer\x1a\x1b.acl.AccessListReturnStatus\"\x00\x12K\n\x15\x41\x63\x63\x65ssListPileupStart\x12\x13.acl.AccessListVoid\x1a\x1b.acl.AccessListReturnStatus\"\x00\x12I\n\x13\x41\x63\x63\x65ssListPileupEnd\x12\x13.acl.AccessListVoid\x1a\x1b.acl.AccessListReturnStatus\"\x00\x12K\n\x14\x41\x63\x63\x65ssListCounterGet\x12\x16.acl.AccessListCounter\x1a\x19.acl.AccessListCounterVal\"\x00\x12R\n\x1b\x41\x63\x63\x65ssListPolicerCounterGet\x12\x16.acl.AccessListCounter\x1a\x19.acl.AccessListCounterVal\"\x00\x12O\n\x16\x41\x63\x63\x65ssListCounterClear\x12\x16.acl.AccessListCounter\x1a\x1b.acl.AccessListReturnStatus\"\x00\x12U\n\x18\x41\x63\x63\x65ssListCounterBulkGet\x12\x1a.acl.AccessListCounterBulk\x1a\x19.acl.AccessListCounterVal\"\x00\x30\x01\x12\\\n\x1f\x41\x63\x63\x65ssListPolicerCounterBulkGet\x12\x1a.acl.AccessListCounterBulk\x1a\x19.acl.AccessListCounterVal\"\x00\x30\x01\x62\x06proto3')
  ,
  dependencies=[jnx__addr__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_ACLBOOLEANTYPE = _descriptor.EnumDescriptor(
  name='AclBooleanType',
  full_name='acl.AclBooleanType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACL_FALSE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_TRUE', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=6568,
  serialized_end=6613,
)
_sym_db.RegisterEnumDescriptor(_ACLBOOLEANTYPE)

AclBooleanType = enum_type_wrapper.EnumTypeWrapper(_ACLBOOLEANTYPE)
_ACLMATCHOPERATION = _descriptor.EnumDescriptor(
  name='AclMatchOperation',
  full_name='acl.AclMatchOperation',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACL_MATCH_OP_INVALID', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_MATCH_OP_EQUAL', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_MATCH_OP_NOT_EQUAL', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=6615,
  serialized_end=6712,
)
_sym_db.RegisterEnumDescriptor(_ACLMATCHOPERATION)

AclMatchOperation = enum_type_wrapper.EnumTypeWrapper(_ACLMATCHOPERATION)
_ACLPOLICERTYPE = _descriptor.EnumDescriptor(
  name='AclPolicerType',
  full_name='acl.AclPolicerType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACL_POLICER_INVALID', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_TWO_COLOR_POLICER', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_SINGLE_RATE_THREE_COLOR_POLICER', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_TWO_RATE_THREE_COLOR_POLICER', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_HIERARCHICAL_POLICER', index=4, number=4,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=6715,
  serialized_end=6892,
)
_sym_db.RegisterEnumDescriptor(_ACLPOLICERTYPE)

AclPolicerType = enum_type_wrapper.EnumTypeWrapper(_ACLPOLICERTYPE)
_ACLPOLICERFLAGS = _descriptor.EnumDescriptor(
  name='AclPolicerFlags',
  full_name='acl.AclPolicerFlags',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACL_POLICER_FLAG_INVALID', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_POLICER_FLAG_TERM_SPECIFIC', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_POLICER_FLAG_FILTER_SPECIFIC', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=6894,
  serialized_end=7015,
)
_sym_db.RegisterEnumDescriptor(_ACLPOLICERFLAGS)

AclPolicerFlags = enum_type_wrapper.EnumTypeWrapper(_ACLPOLICERFLAGS)
_ACLPOLICERRATE = _descriptor.EnumDescriptor(
  name='AclPolicerRate',
  full_name='acl.AclPolicerRate',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACL_POLICER_RATE_INVALID', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_POLICER_RATE_BPS', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_POLICER_RATE_KBPS', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_POLICER_RATE_MBPS', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_POLICER_RATE_GBPS', index=4, number=4,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=7018,
  serialized_end=7171,
)
_sym_db.RegisterEnumDescriptor(_ACLPOLICERRATE)

AclPolicerRate = enum_type_wrapper.EnumTypeWrapper(_ACLPOLICERRATE)
_ACLPOLICERBURSTSIZE = _descriptor.EnumDescriptor(
  name='AclPolicerBurstSize',
  full_name='acl.AclPolicerBurstSize',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACL_POLICER_BURST_SIZE_INVALID', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_POLICER_BURST_SIZE_BYTE', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_POLICER_BURST_SIZE_KBYTE', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_POLICER_BURST_SIZE_MBYTE', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_POLICER_BURST_SIZE_GBYTE', index=4, number=4,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=7174,
  serialized_end=7366,
)
_sym_db.RegisterEnumDescriptor(_ACLPOLICERBURSTSIZE)

AclPolicerBurstSize = enum_type_wrapper.EnumTypeWrapper(_ACLPOLICERBURSTSIZE)
_ACLCOLORMODETYPE = _descriptor.EnumDescriptor(
  name='AclColorModeType',
  full_name='acl.AclColorModeType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACL_COLOR_MODE_INVALID', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_COLOR_MODE_COLOR_BLIND', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_COLOR_MODE_COLOR_AWARE', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=7368,
  serialized_end=7478,
)
_sym_db.RegisterEnumDescriptor(_ACLCOLORMODETYPE)

AclColorModeType = enum_type_wrapper.EnumTypeWrapper(_ACLCOLORMODETYPE)
_ACLLOSSPRIORITY = _descriptor.EnumDescriptor(
  name='AclLossPriority',
  full_name='acl.AclLossPriority',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACL_LOSS_PRIORITY_INVALID', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_LOSS_PRIORITY_HIGH', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_LOSS_PRIORITY_MEDIUM_HIGH', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_LOSS_PRIORITY_MEDIUM_LOW', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_LOSS_PRIORITY_LOW', index=4, number=4,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=7481,
  serialized_end=7653,
)
_sym_db.RegisterEnumDescriptor(_ACLLOSSPRIORITY)

AclLossPriority = enum_type_wrapper.EnumTypeWrapper(_ACLLOSSPRIORITY)
_ACLENTRYACTIONREJECTREASON = _descriptor.EnumDescriptor(
  name='AclEntryActionRejectReason',
  full_name='acl.AclEntryActionRejectReason',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACL_ACTION_REJECT_ADMINISTRATIVELY_PROHIBITED', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_ACTION_REJECT_BAD_HOST_TOS', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_ACTION_REJECT_BAD_NETWORK_TOS', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_ACTION_REJECT_FRAGMENTATION_NEEDED', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_ACTION_REJECT_HOST_PROHIBITED', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_ACTION_REJECT_HOST_UNKNOWN', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_ACTION_REJECT_HOST_UNREACHABLE', index=6, number=6,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_ACTION_REJECT_NETWORK_PROHIBITED', index=7, number=7,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_ACTION_REJECT_NETWORK_UNKNOWN', index=8, number=8,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_ACTION_REJECT_NETWORK_UNREACHABLE', index=9, number=9,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_ACTION_REJECT_PORT_UNREACHABLE', index=10, number=10,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_ACTION_REJECT_PRECEDENCE_CUTOFF', index=11, number=11,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_ACTION_REJECT_PRECEDENCE_VIOLATION', index=12, number=12,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_ACTION_REJECT_PROTOCOL_UNREACHABLE', index=13, number=13,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_ACTION_REJECT_SOURCE_HOST_ISOLATED', index=14, number=14,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_ACTION_REJECT_SOURCE_ROUTE_FAILED', index=15, number=15,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_ACTION_REJECT_TCP_RESET', index=16, number=16,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=7656,
  serialized_end=8382,
)
_sym_db.RegisterEnumDescriptor(_ACLENTRYACTIONREJECTREASON)

AclEntryActionRejectReason = enum_type_wrapper.EnumTypeWrapper(_ACLENTRYACTIONREJECTREASON)
_ACLFRAGMENTFLAGS = _descriptor.EnumDescriptor(
  name='AclFragmentFlags',
  full_name='acl.AclFragmentFlags',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACL_FRAGMENT_NONE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_DONT_FRAGMENT', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_IS_FRAGMENT', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_FIRST_FRAGMENT', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_LAST_FRAGMENT', index=4, number=4,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=8385,
  serialized_end=8517,
)
_sym_db.RegisterEnumDescriptor(_ACLFRAGMENTFLAGS)

AclFragmentFlags = enum_type_wrapper.EnumTypeWrapper(_ACLFRAGMENTFLAGS)
_PRECEDENCE = _descriptor.EnumDescriptor(
  name='Precedence',
  full_name='acl.Precedence',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACL_PRECENCE_ROUTINE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_PRECENCE_PRIORITY', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_PRECENCE_IMMEDIATE', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_PRECENCE_FLASH', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_PRECENCE_FLASH_OVERRIDE', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_PRECENCE_CRITICAL_ECP', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_PRECENCE_INTERNET_CONTROL', index=6, number=6,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_PRECENCE_NET_CONTROL', index=7, number=7,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=8520,
  serialized_end=8766,
)
_sym_db.RegisterEnumDescriptor(_PRECEDENCE)

Precedence = enum_type_wrapper.EnumTypeWrapper(_PRECEDENCE)
_ACLENTRYOPERATION = _descriptor.EnumDescriptor(
  name='AclEntryOperation',
  full_name='acl.AclEntryOperation',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACL_ENTRY_OPERATION_INVALID', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_ENTRY_OPERATION_ADD', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_ENTRY_OPERATION_DELETE', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_ENTRY_OPERATION_REPLACE', index=3, number=3,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=8769,
  serialized_end=8915,
)
_sym_db.RegisterEnumDescriptor(_ACLENTRYOPERATION)

AclEntryOperation = enum_type_wrapper.EnumTypeWrapper(_ACLENTRYOPERATION)
_ACLADJACENCYTYPE = _descriptor.EnumDescriptor(
  name='AclAdjacencyType',
  full_name='acl.AclAdjacencyType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACL_ADJACENCY_NONE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_ADJACENCY_AFTER', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_ADJACENCY_BEFORE', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=8917,
  serialized_end=9010,
)
_sym_db.RegisterEnumDescriptor(_ACLADJACENCYTYPE)

AclAdjacencyType = enum_type_wrapper.EnumTypeWrapper(_ACLADJACENCYTYPE)
_ACLENTRYMATCHFLEXSTARTOFFEST = _descriptor.EnumDescriptor(
  name='AclEntryMatchFlexStartOffest',
  full_name='acl.AclEntryMatchFlexStartOffest',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACL_FLEX_MATCH_OFFSET_INVALID', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_FLEX_MATCH_OFFSET_LAYER_THREE', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_FLEX_MATCH_OFFSET_LAYER_FOUR', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_FLEX_MATCH_OFFSET_PAYLOAD', index=3, number=3,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=9013,
  serialized_end=9190,
)
_sym_db.RegisterEnumDescriptor(_ACLENTRYMATCHFLEXSTARTOFFEST)

AclEntryMatchFlexStartOffest = enum_type_wrapper.EnumTypeWrapper(_ACLENTRYMATCHFLEXSTARTOFFEST)
_ACCESSLISTTYPES = _descriptor.EnumDescriptor(
  name='AccessListTypes',
  full_name='acl.AccessListTypes',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACL_TYPE_INVALID', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_TYPE_CLASSIC', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=9192,
  serialized_end=9253,
)
_sym_db.RegisterEnumDescriptor(_ACCESSLISTTYPES)

AccessListTypes = enum_type_wrapper.EnumTypeWrapper(_ACCESSLISTTYPES)
_ACCESSLISTFAMILIES = _descriptor.EnumDescriptor(
  name='AccessListFamilies',
  full_name='acl.AccessListFamilies',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACL_FAMILY_INVALID', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_FAMILY_INET', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_FAMILY_INET6', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_FAMILY_ES', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_FAMILY_VPLS', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_FAMILY_MULTISERVICE', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_FAMILY_CCC', index=6, number=6,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_FAMILY_MPLS', index=7, number=7,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=9256,
  serialized_end=9453,
)
_sym_db.RegisterEnumDescriptor(_ACCESSLISTFAMILIES)

AccessListFamilies = enum_type_wrapper.EnumTypeWrapper(_ACCESSLISTFAMILIES)
_ACCESSLISTFLAGS = _descriptor.EnumDescriptor(
  name='AccessListFlags',
  full_name='acl.AccessListFlags',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACL_FLAGS_NONE', index=0, number=0,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=9455,
  serialized_end=9492,
)
_sym_db.RegisterEnumDescriptor(_ACCESSLISTFLAGS)

AccessListFlags = enum_type_wrapper.EnumTypeWrapper(_ACCESSLISTFLAGS)
_ACLBINDDIRECTION = _descriptor.EnumDescriptor(
  name='AclBindDirection',
  full_name='acl.AclBindDirection',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACL_BIND_DIRECTION_INVALID', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_BIND_DIRECTION_INPUT', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_BIND_DIRECTION_OUTPUT', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=9494,
  serialized_end=9605,
)
_sym_db.RegisterEnumDescriptor(_ACLBINDDIRECTION)

AclBindDirection = enum_type_wrapper.EnumTypeWrapper(_ACLBINDDIRECTION)
_ACCESSLISTRETURNVAL = _descriptor.EnumDescriptor(
  name='AccessListReturnVal',
  full_name='acl.AccessListReturnVal',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACL_STATUS_EOK', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_STATUS_NULL_MESSAGE', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_STATUS_EINVALID_MESSAGE', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_STATUS_EINTERNAL', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_STATUS_EUNSUPPORTED_OP', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_STATUS_NO_RESOURCE', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_STATUS_BS_TIMEOUT', index=6, number=6,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=9608,
  serialized_end=9824,
)
_sym_db.RegisterEnumDescriptor(_ACCESSLISTRETURNVAL)

AccessListReturnVal = enum_type_wrapper.EnumTypeWrapper(_ACCESSLISTRETURNVAL)
_ACCESSLISTBINDOBJTYPE = _descriptor.EnumDescriptor(
  name='AccessListBindObjType',
  full_name='acl.AccessListBindObjType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACL_BIND_OBJ_TYPE_INVALID', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACL_BIND_OBJ_TYPE_INTERFACE', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=9826,
  serialized_end=9913,
)
_sym_db.RegisterEnumDescriptor(_ACCESSLISTBINDOBJTYPE)

AccessListBindObjType = enum_type_wrapper.EnumTypeWrapper(_ACCESSLISTBINDOBJTYPE)
ACL_FALSE = 0
ACL_TRUE = 1
ACL_MATCH_OP_INVALID = 0
ACL_MATCH_OP_EQUAL = 1
ACL_MATCH_OP_NOT_EQUAL = 2
ACL_POLICER_INVALID = 0
ACL_TWO_COLOR_POLICER = 1
ACL_SINGLE_RATE_THREE_COLOR_POLICER = 2
ACL_TWO_RATE_THREE_COLOR_POLICER = 3
ACL_HIERARCHICAL_POLICER = 4
ACL_POLICER_FLAG_INVALID = 0
ACL_POLICER_FLAG_TERM_SPECIFIC = 1
ACL_POLICER_FLAG_FILTER_SPECIFIC = 2
ACL_POLICER_RATE_INVALID = 0
ACL_POLICER_RATE_BPS = 1
ACL_POLICER_RATE_KBPS = 2
ACL_POLICER_RATE_MBPS = 3
ACL_POLICER_RATE_GBPS = 4
ACL_POLICER_BURST_SIZE_INVALID = 0
ACL_POLICER_BURST_SIZE_BYTE = 1
ACL_POLICER_BURST_SIZE_KBYTE = 2
ACL_POLICER_BURST_SIZE_MBYTE = 3
ACL_POLICER_BURST_SIZE_GBYTE = 4
ACL_COLOR_MODE_INVALID = 0
ACL_COLOR_MODE_COLOR_BLIND = 1
ACL_COLOR_MODE_COLOR_AWARE = 2
ACL_LOSS_PRIORITY_INVALID = 0
ACL_LOSS_PRIORITY_HIGH = 1
ACL_LOSS_PRIORITY_MEDIUM_HIGH = 2
ACL_LOSS_PRIORITY_MEDIUM_LOW = 3
ACL_LOSS_PRIORITY_LOW = 4
ACL_ACTION_REJECT_ADMINISTRATIVELY_PROHIBITED = 0
ACL_ACTION_REJECT_BAD_HOST_TOS = 1
ACL_ACTION_REJECT_BAD_NETWORK_TOS = 2
ACL_ACTION_REJECT_FRAGMENTATION_NEEDED = 3
ACL_ACTION_REJECT_HOST_PROHIBITED = 4
ACL_ACTION_REJECT_HOST_UNKNOWN = 5
ACL_ACTION_REJECT_HOST_UNREACHABLE = 6
ACL_ACTION_REJECT_NETWORK_PROHIBITED = 7
ACL_ACTION_REJECT_NETWORK_UNKNOWN = 8
ACL_ACTION_REJECT_NETWORK_UNREACHABLE = 9
ACL_ACTION_REJECT_PORT_UNREACHABLE = 10
ACL_ACTION_REJECT_PRECEDENCE_CUTOFF = 11
ACL_ACTION_REJECT_PRECEDENCE_VIOLATION = 12
ACL_ACTION_REJECT_PROTOCOL_UNREACHABLE = 13
ACL_ACTION_REJECT_SOURCE_HOST_ISOLATED = 14
ACL_ACTION_REJECT_SOURCE_ROUTE_FAILED = 15
ACL_ACTION_REJECT_TCP_RESET = 16
ACL_FRAGMENT_NONE = 0
ACL_DONT_FRAGMENT = 1
ACL_IS_FRAGMENT = 2
ACL_FIRST_FRAGMENT = 3
ACL_LAST_FRAGMENT = 4
ACL_PRECENCE_ROUTINE = 0
ACL_PRECENCE_PRIORITY = 1
ACL_PRECENCE_IMMEDIATE = 2
ACL_PRECENCE_FLASH = 3
ACL_PRECENCE_FLASH_OVERRIDE = 4
ACL_PRECENCE_CRITICAL_ECP = 5
ACL_PRECENCE_INTERNET_CONTROL = 6
ACL_PRECENCE_NET_CONTROL = 7
ACL_ENTRY_OPERATION_INVALID = 0
ACL_ENTRY_OPERATION_ADD = 1
ACL_ENTRY_OPERATION_DELETE = 2
ACL_ENTRY_OPERATION_REPLACE = 3
ACL_ADJACENCY_NONE = 0
ACL_ADJACENCY_AFTER = 1
ACL_ADJACENCY_BEFORE = 2
ACL_FLEX_MATCH_OFFSET_INVALID = 0
ACL_FLEX_MATCH_OFFSET_LAYER_THREE = 1
ACL_FLEX_MATCH_OFFSET_LAYER_FOUR = 2
ACL_FLEX_MATCH_OFFSET_PAYLOAD = 3
ACL_TYPE_INVALID = 0
ACL_TYPE_CLASSIC = 1
ACL_FAMILY_INVALID = 0
ACL_FAMILY_INET = 1
ACL_FAMILY_INET6 = 2
ACL_FAMILY_ES = 3
ACL_FAMILY_VPLS = 4
ACL_FAMILY_MULTISERVICE = 5
ACL_FAMILY_CCC = 6
ACL_FAMILY_MPLS = 7
ACL_FLAGS_NONE = 0
ACL_BIND_DIRECTION_INVALID = 0
ACL_BIND_DIRECTION_INPUT = 1
ACL_BIND_DIRECTION_OUTPUT = 2
ACL_STATUS_EOK = 0
ACL_STATUS_NULL_MESSAGE = 1
ACL_STATUS_EINVALID_MESSAGE = 2
ACL_STATUS_EINTERNAL = 3
ACL_STATUS_EUNSUPPORTED_OP = 4
ACL_STATUS_NO_RESOURCE = 5
ACL_STATUS_BS_TIMEOUT = 6
ACL_BIND_OBJ_TYPE_INVALID = 0
ACL_BIND_OBJ_TYPE_INTERFACE = 1



_ACCESSLISTVOID = _descriptor.Descriptor(
  name='AccessListVoid',
  full_name='acl.AccessListVoid',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='void', full_name='acl.AccessListVoid.void', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=47,
  serialized_end=77,
)


_ACLPOLICERTWOCOLOR = _descriptor.Descriptor(
  name='AclPolicerTwoColor',
  full_name='acl.AclPolicerTwoColor',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='bw_unit', full_name='acl.AclPolicerTwoColor.bw_unit', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bandwidth', full_name='acl.AclPolicerTwoColor.bandwidth', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='burst_unit', full_name='acl.AclPolicerTwoColor.burst_unit', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='burst_size', full_name='acl.AclPolicerTwoColor.burst_size', index=3,
      number=4, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='lp', full_name='acl.AclPolicerTwoColor.lp', index=4,
      number=5, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='fc_string', full_name='acl.AclPolicerTwoColor.fc_string', index=5,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='discard', full_name='acl.AclPolicerTwoColor.discard', index=6,
      number=7, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=80,
  serialized_end=314,
)


_ACLPOLICERSINGLERATETHREECOLOR = _descriptor.Descriptor(
  name='AclPolicerSingleRateThreeColor',
  full_name='acl.AclPolicerSingleRateThreeColor',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='committed_rate_unit', full_name='acl.AclPolicerSingleRateThreeColor.committed_rate_unit', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='committed_rate', full_name='acl.AclPolicerSingleRateThreeColor.committed_rate', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='committed_burst_unit', full_name='acl.AclPolicerSingleRateThreeColor.committed_burst_unit', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='committed_burst_size', full_name='acl.AclPolicerSingleRateThreeColor.committed_burst_size', index=3,
      number=4, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='excess_burst_size', full_name='acl.AclPolicerSingleRateThreeColor.excess_burst_size', index=4,
      number=5, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='excess_burst_unit', full_name='acl.AclPolicerSingleRateThreeColor.excess_burst_unit', index=5,
      number=6, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='discard', full_name='acl.AclPolicerSingleRateThreeColor.discard', index=6,
      number=7, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='color_mode', full_name='acl.AclPolicerSingleRateThreeColor.color_mode', index=7,
      number=8, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=317,
  serialized_end=670,
)


_ACLPOLICERTWORATETHREECOLOR = _descriptor.Descriptor(
  name='AclPolicerTwoRateThreeColor',
  full_name='acl.AclPolicerTwoRateThreeColor',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='committed_rate_unit', full_name='acl.AclPolicerTwoRateThreeColor.committed_rate_unit', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='committed_rate', full_name='acl.AclPolicerTwoRateThreeColor.committed_rate', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='committed_burst_unit', full_name='acl.AclPolicerTwoRateThreeColor.committed_burst_unit', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='committed_burst_size', full_name='acl.AclPolicerTwoRateThreeColor.committed_burst_size', index=3,
      number=4, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='excess_rate_unit', full_name='acl.AclPolicerTwoRateThreeColor.excess_rate_unit', index=4,
      number=5, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='excess_rate', full_name='acl.AclPolicerTwoRateThreeColor.excess_rate', index=5,
      number=6, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='excess_burst_unit', full_name='acl.AclPolicerTwoRateThreeColor.excess_burst_unit', index=6,
      number=7, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='excess_burst_size', full_name='acl.AclPolicerTwoRateThreeColor.excess_burst_size', index=7,
      number=8, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='discard', full_name='acl.AclPolicerTwoRateThreeColor.discard', index=8,
      number=9, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='color_mode', full_name='acl.AclPolicerTwoRateThreeColor.color_mode', index=9,
      number=10, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=673,
  serialized_end=1091,
)


_ACLPOLICERHEIRARCHICAL = _descriptor.Descriptor(
  name='AclPolicerHeirarchical',
  full_name='acl.AclPolicerHeirarchical',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='aggregate_rate_unit', full_name='acl.AclPolicerHeirarchical.aggregate_rate_unit', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='aggregate_rate', full_name='acl.AclPolicerHeirarchical.aggregate_rate', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='aggregate_burst_size_unit', full_name='acl.AclPolicerHeirarchical.aggregate_burst_size_unit', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='aggregate_burst_size', full_name='acl.AclPolicerHeirarchical.aggregate_burst_size', index=3,
      number=4, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='preminum_rate_unit', full_name='acl.AclPolicerHeirarchical.preminum_rate_unit', index=4,
      number=5, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='premium_rate', full_name='acl.AclPolicerHeirarchical.premium_rate', index=5,
      number=6, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='premium_burst_size_unit', full_name='acl.AclPolicerHeirarchical.premium_burst_size_unit', index=6,
      number=7, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='premium_burst_size', full_name='acl.AclPolicerHeirarchical.premium_burst_size', index=7,
      number=8, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='discard', full_name='acl.AclPolicerHeirarchical.discard', index=8,
      number=9, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1094,
  serialized_end=1479,
)


_ACLPOLICERPARAMETER = _descriptor.Descriptor(
  name='AclPolicerParameter',
  full_name='acl.AclPolicerParameter',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='two_color_parameter', full_name='acl.AclPolicerParameter.two_color_parameter', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sr_three_color_parameter', full_name='acl.AclPolicerParameter.sr_three_color_parameter', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tr_three_color_parameter', full_name='acl.AclPolicerParameter.tr_three_color_parameter', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='hierarchical_parameter', full_name='acl.AclPolicerParameter.hierarchical_parameter', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='OneOf_PolicerParameter', full_name='acl.AclPolicerParameter.OneOf_PolicerParameter',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=1482,
  serialized_end=1791,
)


_ACCESSLISTPOLICER = _descriptor.Descriptor(
  name='AccessListPolicer',
  full_name='acl.AccessListPolicer',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='policer_name', full_name='acl.AccessListPolicer.policer_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='policer_type', full_name='acl.AccessListPolicer.policer_type', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='policer_flag', full_name='acl.AccessListPolicer.policer_flag', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='policer_params', full_name='acl.AccessListPolicer.policer_params', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1794,
  serialized_end=1972,
)


_ACLMATCHIPADDRESS = _descriptor.Descriptor(
  name='AclMatchIpAddress',
  full_name='acl.AclMatchIpAddress',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='addr', full_name='acl.AclMatchIpAddress.addr', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='prefix_len', full_name='acl.AclMatchIpAddress.prefix_len', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_op', full_name='acl.AclMatchIpAddress.match_op', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1974,
  serialized_end=2089,
)


_ACLMATCHPORT = _descriptor.Descriptor(
  name='AclMatchPort',
  full_name='acl.AclMatchPort',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='min', full_name='acl.AclMatchPort.min', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max', full_name='acl.AclMatchPort.max', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_op', full_name='acl.AclMatchPort.match_op', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2091,
  serialized_end=2173,
)


_ACLMATCHIPPRECEDENCE = _descriptor.Descriptor(
  name='AclMatchIpPrecedence',
  full_name='acl.AclMatchIpPrecedence',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='min', full_name='acl.AclMatchIpPrecedence.min', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max', full_name='acl.AclMatchIpPrecedence.max', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_op', full_name='acl.AclMatchIpPrecedence.match_op', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2175,
  serialized_end=2299,
)


_ACLMATCHDSCPCODE = _descriptor.Descriptor(
  name='AclMatchDscpCode',
  full_name='acl.AclMatchDscpCode',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='min', full_name='acl.AclMatchDscpCode.min', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max', full_name='acl.AclMatchDscpCode.max', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_op', full_name='acl.AclMatchDscpCode.match_op', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2301,
  serialized_end=2387,
)


_ACLMATCHPROTOCOL = _descriptor.Descriptor(
  name='AclMatchProtocol',
  full_name='acl.AclMatchProtocol',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='min', full_name='acl.AclMatchProtocol.min', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max', full_name='acl.AclMatchProtocol.max', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_op', full_name='acl.AclMatchProtocol.match_op', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2389,
  serialized_end=2475,
)


_ACLMATCHICMPTYPE = _descriptor.Descriptor(
  name='AclMatchIcmpType',
  full_name='acl.AclMatchIcmpType',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='min', full_name='acl.AclMatchIcmpType.min', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max', full_name='acl.AclMatchIcmpType.max', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_op', full_name='acl.AclMatchIcmpType.match_op', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2477,
  serialized_end=2563,
)


_ACLMATCHICMPCODE = _descriptor.Descriptor(
  name='AclMatchIcmpCode',
  full_name='acl.AclMatchIcmpCode',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='min', full_name='acl.AclMatchIcmpCode.min', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max', full_name='acl.AclMatchIcmpCode.max', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_op', full_name='acl.AclMatchIcmpCode.match_op', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2565,
  serialized_end=2651,
)


_ACLMATCHPKTLEN = _descriptor.Descriptor(
  name='AclMatchPktLen',
  full_name='acl.AclMatchPktLen',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='min', full_name='acl.AclMatchPktLen.min', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max', full_name='acl.AclMatchPktLen.max', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_op', full_name='acl.AclMatchPktLen.match_op', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2653,
  serialized_end=2737,
)


_ACLMATCHTTL = _descriptor.Descriptor(
  name='AclMatchTtl',
  full_name='acl.AclMatchTtl',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='min', full_name='acl.AclMatchTtl.min', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max', full_name='acl.AclMatchTtl.max', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_op', full_name='acl.AclMatchTtl.match_op', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2739,
  serialized_end=2820,
)


_ACLMATCHFRAGMENTOFFSET = _descriptor.Descriptor(
  name='AclMatchFragmentOffset',
  full_name='acl.AclMatchFragmentOffset',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='min', full_name='acl.AclMatchFragmentOffset.min', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max', full_name='acl.AclMatchFragmentOffset.max', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_op', full_name='acl.AclMatchFragmentOffset.match_op', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2822,
  serialized_end=2914,
)


_ACLACTIONPOLICER = _descriptor.Descriptor(
  name='AclActionPolicer',
  full_name='acl.AclActionPolicer',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='policer', full_name='acl.AclActionPolicer.policer', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2916,
  serialized_end=2975,
)


_ACLACTIONCOUNTER = _descriptor.Descriptor(
  name='AclActionCounter',
  full_name='acl.AclActionCounter',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='counter_name', full_name='acl.AclActionCounter.counter_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2977,
  serialized_end=3017,
)


_ACLACTIONROUTINGINSTANCE = _descriptor.Descriptor(
  name='AclActionRoutingInstance',
  full_name='acl.AclActionRoutingInstance',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='rt_instance_name', full_name='acl.AclActionRoutingInstance.rt_instance_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3019,
  serialized_end=3071,
)


_ACLADJACENCY = _descriptor.Descriptor(
  name='AclAdjacency',
  full_name='acl.AclAdjacency',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='type', full_name='acl.AclAdjacency.type', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ace_name', full_name='acl.AclAdjacency.ace_name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3073,
  serialized_end=3142,
)


_ACLMATCHIFLNAMEINDEX = _descriptor.Descriptor(
  name='AclMatchIflNameIndex',
  full_name='acl.AclMatchIflNameIndex',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ifl_name', full_name='acl.AclMatchIflNameIndex.ifl_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ifl_index', full_name='acl.AclMatchIflNameIndex.ifl_index', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='AclEntryMatchIflNameFormat', full_name='acl.AclMatchIflNameIndex.AclEntryMatchIflNameFormat',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=3144,
  serialized_end=3237,
)


_ACLMATCHFLEXOFFSET = _descriptor.Descriptor(
  name='AclMatchFlexOffset',
  full_name='acl.AclMatchFlexOffset',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='min', full_name='acl.AclMatchFlexOffset.min', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max', full_name='acl.AclMatchFlexOffset.max', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_op', full_name='acl.AclMatchFlexOffset.match_op', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3239,
  serialized_end=3327,
)


_ACLMATCHFLEXIBLERANGE = _descriptor.Descriptor(
  name='AclMatchFlexibleRange',
  full_name='acl.AclMatchFlexibleRange',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='start_offset', full_name='acl.AclMatchFlexibleRange.start_offset', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bit_length', full_name='acl.AclMatchFlexibleRange.bit_length', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bit_offset', full_name='acl.AclMatchFlexibleRange.bit_offset', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='byte_offset', full_name='acl.AclMatchFlexibleRange.byte_offset', index=3,
      number=4, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='range', full_name='acl.AclMatchFlexibleRange.range', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3330,
  serialized_end=3511,
)


_ACLMATCHFLEXIBLEOFFSETRANGE = _descriptor.Descriptor(
  name='AclMatchFlexibleOffsetRange',
  full_name='acl.AclMatchFlexibleOffsetRange',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='flex_range_match', full_name='acl.AclMatchFlexibleOffsetRange.flex_range_match', index=0,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='Oneof_AclEntryMatchFlexibleOffsetRange', full_name='acl.AclMatchFlexibleOffsetRange.Oneof_AclEntryMatchFlexibleOffsetRange',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=3513,
  serialized_end=3640,
)


_ACLMATCHFLEXIBLEMASK = _descriptor.Descriptor(
  name='AclMatchFlexibleMask',
  full_name='acl.AclMatchFlexibleMask',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='start_offset', full_name='acl.AclMatchFlexibleMask.start_offset', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bit_length', full_name='acl.AclMatchFlexibleMask.bit_length', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bit_offset', full_name='acl.AclMatchFlexibleMask.bit_offset', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='byte_offset', full_name='acl.AclMatchFlexibleMask.byte_offset', index=3,
      number=4, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='mask', full_name='acl.AclMatchFlexibleMask.mask', index=4,
      number=5, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='prefix_string', full_name='acl.AclMatchFlexibleMask.prefix_string', index=5,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3643,
  serialized_end=3820,
)


_ACLMATCHFLEXIBLEOFFSETMASK = _descriptor.Descriptor(
  name='AclMatchFlexibleOffsetMask',
  full_name='acl.AclMatchFlexibleOffsetMask',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='flex_mask_match', full_name='acl.AclMatchFlexibleOffsetMask.flex_mask_match', index=0,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='Oneof_AclEntryMatchFlexibleOffsetMask', full_name='acl.AclMatchFlexibleOffsetMask.Oneof_AclEntryMatchFlexibleOffsetMask',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=3822,
  serialized_end=3945,
)


_ACLENTRYMATCHINET = _descriptor.Descriptor(
  name='AclEntryMatchInet',
  full_name='acl.AclEntryMatchInet',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='match_dst_addrs', full_name='acl.AclEntryMatchInet.match_dst_addrs', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_src_addrs', full_name='acl.AclEntryMatchInet.match_src_addrs', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_dst_ports', full_name='acl.AclEntryMatchInet.match_dst_ports', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_src_ports', full_name='acl.AclEntryMatchInet.match_src_ports', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_dscp_code', full_name='acl.AclEntryMatchInet.match_dscp_code', index=4,
      number=5, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_protocols', full_name='acl.AclEntryMatchInet.match_protocols', index=5,
      number=6, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_icmp_type', full_name='acl.AclEntryMatchInet.match_icmp_type', index=6,
      number=7, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_icmp_code', full_name='acl.AclEntryMatchInet.match_icmp_code', index=7,
      number=8, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_pkt_len', full_name='acl.AclEntryMatchInet.match_pkt_len', index=8,
      number=9, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_ttl', full_name='acl.AclEntryMatchInet.match_ttl', index=9,
      number=10, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='fragment_flags', full_name='acl.AclEntryMatchInet.fragment_flags', index=10,
      number=11, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_frag_offset', full_name='acl.AclEntryMatchInet.match_frag_offset', index=11,
      number=12, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ifl_names', full_name='acl.AclEntryMatchInet.ifl_names', index=12,
      number=13, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_ip_precedence', full_name='acl.AclEntryMatchInet.match_ip_precedence', index=13,
      number=14, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_addrs', full_name='acl.AclEntryMatchInet.match_addrs', index=14,
      number=15, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_ports', full_name='acl.AclEntryMatchInet.match_ports', index=15,
      number=16, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_flex_range', full_name='acl.AclEntryMatchInet.match_flex_range', index=16,
      number=17, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='match_flex_mask', full_name='acl.AclEntryMatchInet.match_flex_mask', index=17,
      number=18, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3948,
  serialized_end=4834,
)


_ACLENTRYINETTERMINATINGACTION = _descriptor.Descriptor(
  name='AclEntryInetTerminatingAction',
  full_name='acl.AclEntryInetTerminatingAction',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='action_accept', full_name='acl.AclEntryInetTerminatingAction.action_accept', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='action_discard', full_name='acl.AclEntryInetTerminatingAction.action_discard', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='action_reject', full_name='acl.AclEntryInetTerminatingAction.action_reject', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='action_rt_inst', full_name='acl.AclEntryInetTerminatingAction.action_rt_inst', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='Oneof_AclEntryInetTerminatingAction', full_name='acl.AclEntryInetTerminatingAction.Oneof_AclEntryInetTerminatingAction',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=4837,
  serialized_end=5115,
)


_ACLENTRYINETNONTERMINATINGACTION = _descriptor.Descriptor(
  name='AclEntryInetNonTerminatingAction',
  full_name='acl.AclEntryInetNonTerminatingAction',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='action_count', full_name='acl.AclEntryInetNonTerminatingAction.action_count', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='action_log', full_name='acl.AclEntryInetNonTerminatingAction.action_log', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='action_syslog', full_name='acl.AclEntryInetNonTerminatingAction.action_syslog', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='action_policer', full_name='acl.AclEntryInetNonTerminatingAction.action_policer', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='action_sample', full_name='acl.AclEntryInetNonTerminatingAction.action_sample', index=4,
      number=5, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='action_next_term', full_name='acl.AclEntryInetNonTerminatingAction.action_next_term', index=5,
      number=6, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5118,
  serialized_end=5420,
)


_ACLENTRYINETACTION = _descriptor.Descriptor(
  name='AclEntryInetAction',
  full_name='acl.AclEntryInetAction',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='actions_nt', full_name='acl.AclEntryInetAction.actions_nt', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='action_t', full_name='acl.AclEntryInetAction.action_t', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5423,
  serialized_end=5556,
)


_ACLINETENTRY = _descriptor.Descriptor(
  name='AclInetEntry',
  full_name='acl.AclInetEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ace_name', full_name='acl.AclInetEntry.ace_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ace_op', full_name='acl.AclInetEntry.ace_op', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='adjacency', full_name='acl.AclInetEntry.adjacency', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='matches', full_name='acl.AclInetEntry.matches', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='actions', full_name='acl.AclInetEntry.actions', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5559,
  serialized_end=5752,
)


_ACLENTRY = _descriptor.Descriptor(
  name='AclEntry',
  full_name='acl.AclEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='inet_entry', full_name='acl.AclEntry.inet_entry', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='OneOf_AclEntry', full_name='acl.AclEntry.OneOf_AclEntry',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=5754,
  serialized_end=5823,
)


_ACCESSLIST = _descriptor.Descriptor(
  name='AccessList',
  full_name='acl.AccessList',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='acl_name', full_name='acl.AccessList.acl_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='acl_type', full_name='acl.AccessList.acl_type', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='acl_family', full_name='acl.AccessList.acl_family', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='acl_flag', full_name='acl.AccessList.acl_flag', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ace_list', full_name='acl.AccessList.ace_list', index=4,
      number=5, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5826,
  serialized_end=6014,
)


_ACCESSLISTCOUNTER = _descriptor.Descriptor(
  name='AccessListCounter',
  full_name='acl.AccessListCounter',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='acl', full_name='acl.AccessListCounter.acl', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='counter_name', full_name='acl.AccessListCounter.counter_name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=6016,
  serialized_end=6087,
)


_ACCESSLISTCOUNTERBULK = _descriptor.Descriptor(
  name='AccessListCounterBulk',
  full_name='acl.AccessListCounterBulk',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='acl', full_name='acl.AccessListCounterBulk.acl', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='starting_index', full_name='acl.AccessListCounterBulk.starting_index', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=6089,
  serialized_end=6166,
)


_ACCESSLISTRETURNSTATUS = _descriptor.Descriptor(
  name='AccessListReturnStatus',
  full_name='acl.AccessListReturnStatus',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='acl.AccessListReturnStatus.status', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=6168,
  serialized_end=6234,
)


_ACCESSLISTCOUNTERVAL = _descriptor.Descriptor(
  name='AccessListCounterVal',
  full_name='acl.AccessListCounterVal',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='counter_name', full_name='acl.AccessListCounterVal.counter_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='status', full_name='acl.AccessListCounterVal.status', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bytes', full_name='acl.AccessListCounterVal.bytes', index=2,
      number=3, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='packets', full_name='acl.AccessListCounterVal.packets', index=3,
      number=4, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=6236,
  serialized_end=6354,
)


_ACCESSLISTOBJBIND = _descriptor.Descriptor(
  name='AccessListObjBind',
  full_name='acl.AccessListObjBind',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='acl', full_name='acl.AccessListObjBind.acl', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='obj_type', full_name='acl.AccessListObjBind.obj_type', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bind_object', full_name='acl.AccessListObjBind.bind_object', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bind_direction', full_name='acl.AccessListObjBind.bind_direction', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bind_family', full_name='acl.AccessListObjBind.bind_family', index=4,
      number=5, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=6357,
  serialized_end=6566,
)

_ACLPOLICERTWOCOLOR.fields_by_name['bw_unit'].enum_type = _ACLPOLICERRATE
_ACLPOLICERTWOCOLOR.fields_by_name['burst_unit'].enum_type = _ACLPOLICERBURSTSIZE
_ACLPOLICERTWOCOLOR.fields_by_name['lp'].enum_type = _ACLLOSSPRIORITY
_ACLPOLICERTWOCOLOR.fields_by_name['discard'].enum_type = _ACLBOOLEANTYPE
_ACLPOLICERSINGLERATETHREECOLOR.fields_by_name['committed_rate_unit'].enum_type = _ACLPOLICERRATE
_ACLPOLICERSINGLERATETHREECOLOR.fields_by_name['committed_burst_unit'].enum_type = _ACLPOLICERBURSTSIZE
_ACLPOLICERSINGLERATETHREECOLOR.fields_by_name['excess_burst_unit'].enum_type = _ACLPOLICERBURSTSIZE
_ACLPOLICERSINGLERATETHREECOLOR.fields_by_name['discard'].enum_type = _ACLBOOLEANTYPE
_ACLPOLICERSINGLERATETHREECOLOR.fields_by_name['color_mode'].enum_type = _ACLCOLORMODETYPE
_ACLPOLICERTWORATETHREECOLOR.fields_by_name['committed_rate_unit'].enum_type = _ACLPOLICERRATE
_ACLPOLICERTWORATETHREECOLOR.fields_by_name['committed_burst_unit'].enum_type = _ACLPOLICERBURSTSIZE
_ACLPOLICERTWORATETHREECOLOR.fields_by_name['excess_rate_unit'].enum_type = _ACLPOLICERRATE
_ACLPOLICERTWORATETHREECOLOR.fields_by_name['excess_burst_unit'].enum_type = _ACLPOLICERBURSTSIZE
_ACLPOLICERTWORATETHREECOLOR.fields_by_name['discard'].enum_type = _ACLBOOLEANTYPE
_ACLPOLICERTWORATETHREECOLOR.fields_by_name['color_mode'].enum_type = _ACLCOLORMODETYPE
_ACLPOLICERHEIRARCHICAL.fields_by_name['aggregate_rate_unit'].enum_type = _ACLPOLICERRATE
_ACLPOLICERHEIRARCHICAL.fields_by_name['aggregate_burst_size_unit'].enum_type = _ACLPOLICERBURSTSIZE
_ACLPOLICERHEIRARCHICAL.fields_by_name['preminum_rate_unit'].enum_type = _ACLPOLICERRATE
_ACLPOLICERHEIRARCHICAL.fields_by_name['premium_burst_size_unit'].enum_type = _ACLPOLICERBURSTSIZE
_ACLPOLICERHEIRARCHICAL.fields_by_name['discard'].enum_type = _ACLBOOLEANTYPE
_ACLPOLICERPARAMETER.fields_by_name['two_color_parameter'].message_type = _ACLPOLICERTWOCOLOR
_ACLPOLICERPARAMETER.fields_by_name['sr_three_color_parameter'].message_type = _ACLPOLICERSINGLERATETHREECOLOR
_ACLPOLICERPARAMETER.fields_by_name['tr_three_color_parameter'].message_type = _ACLPOLICERTWORATETHREECOLOR
_ACLPOLICERPARAMETER.fields_by_name['hierarchical_parameter'].message_type = _ACLPOLICERHEIRARCHICAL
_ACLPOLICERPARAMETER.oneofs_by_name['OneOf_PolicerParameter'].fields.append(
  _ACLPOLICERPARAMETER.fields_by_name['two_color_parameter'])
_ACLPOLICERPARAMETER.fields_by_name['two_color_parameter'].containing_oneof = _ACLPOLICERPARAMETER.oneofs_by_name['OneOf_PolicerParameter']
_ACLPOLICERPARAMETER.oneofs_by_name['OneOf_PolicerParameter'].fields.append(
  _ACLPOLICERPARAMETER.fields_by_name['sr_three_color_parameter'])
_ACLPOLICERPARAMETER.fields_by_name['sr_three_color_parameter'].containing_oneof = _ACLPOLICERPARAMETER.oneofs_by_name['OneOf_PolicerParameter']
_ACLPOLICERPARAMETER.oneofs_by_name['OneOf_PolicerParameter'].fields.append(
  _ACLPOLICERPARAMETER.fields_by_name['tr_three_color_parameter'])
_ACLPOLICERPARAMETER.fields_by_name['tr_three_color_parameter'].containing_oneof = _ACLPOLICERPARAMETER.oneofs_by_name['OneOf_PolicerParameter']
_ACLPOLICERPARAMETER.oneofs_by_name['OneOf_PolicerParameter'].fields.append(
  _ACLPOLICERPARAMETER.fields_by_name['hierarchical_parameter'])
_ACLPOLICERPARAMETER.fields_by_name['hierarchical_parameter'].containing_oneof = _ACLPOLICERPARAMETER.oneofs_by_name['OneOf_PolicerParameter']
_ACCESSLISTPOLICER.fields_by_name['policer_type'].enum_type = _ACLPOLICERTYPE
_ACCESSLISTPOLICER.fields_by_name['policer_flag'].enum_type = _ACLPOLICERFLAGS
_ACCESSLISTPOLICER.fields_by_name['policer_params'].message_type = _ACLPOLICERPARAMETER
_ACLMATCHIPADDRESS.fields_by_name['addr'].message_type = jnx__addr__pb2._IPADDRESS
_ACLMATCHIPADDRESS.fields_by_name['match_op'].enum_type = _ACLMATCHOPERATION
_ACLMATCHPORT.fields_by_name['match_op'].enum_type = _ACLMATCHOPERATION
_ACLMATCHIPPRECEDENCE.fields_by_name['min'].enum_type = _PRECEDENCE
_ACLMATCHIPPRECEDENCE.fields_by_name['max'].enum_type = _PRECEDENCE
_ACLMATCHIPPRECEDENCE.fields_by_name['match_op'].enum_type = _ACLMATCHOPERATION
_ACLMATCHDSCPCODE.fields_by_name['match_op'].enum_type = _ACLMATCHOPERATION
_ACLMATCHPROTOCOL.fields_by_name['match_op'].enum_type = _ACLMATCHOPERATION
_ACLMATCHICMPTYPE.fields_by_name['match_op'].enum_type = _ACLMATCHOPERATION
_ACLMATCHICMPCODE.fields_by_name['match_op'].enum_type = _ACLMATCHOPERATION
_ACLMATCHPKTLEN.fields_by_name['match_op'].enum_type = _ACLMATCHOPERATION
_ACLMATCHTTL.fields_by_name['match_op'].enum_type = _ACLMATCHOPERATION
_ACLMATCHFRAGMENTOFFSET.fields_by_name['match_op'].enum_type = _ACLMATCHOPERATION
_ACLACTIONPOLICER.fields_by_name['policer'].message_type = _ACCESSLISTPOLICER
_ACLADJACENCY.fields_by_name['type'].enum_type = _ACLADJACENCYTYPE
_ACLMATCHIFLNAMEINDEX.oneofs_by_name['AclEntryMatchIflNameFormat'].fields.append(
  _ACLMATCHIFLNAMEINDEX.fields_by_name['ifl_name'])
_ACLMATCHIFLNAMEINDEX.fields_by_name['ifl_name'].containing_oneof = _ACLMATCHIFLNAMEINDEX.oneofs_by_name['AclEntryMatchIflNameFormat']
_ACLMATCHIFLNAMEINDEX.oneofs_by_name['AclEntryMatchIflNameFormat'].fields.append(
  _ACLMATCHIFLNAMEINDEX.fields_by_name['ifl_index'])
_ACLMATCHIFLNAMEINDEX.fields_by_name['ifl_index'].containing_oneof = _ACLMATCHIFLNAMEINDEX.oneofs_by_name['AclEntryMatchIflNameFormat']
_ACLMATCHFLEXOFFSET.fields_by_name['match_op'].enum_type = _ACLMATCHOPERATION
_ACLMATCHFLEXIBLERANGE.fields_by_name['start_offset'].enum_type = _ACLENTRYMATCHFLEXSTARTOFFEST
_ACLMATCHFLEXIBLERANGE.fields_by_name['range'].message_type = _ACLMATCHFLEXOFFSET
_ACLMATCHFLEXIBLEOFFSETRANGE.fields_by_name['flex_range_match'].message_type = _ACLMATCHFLEXIBLERANGE
_ACLMATCHFLEXIBLEOFFSETRANGE.oneofs_by_name['Oneof_AclEntryMatchFlexibleOffsetRange'].fields.append(
  _ACLMATCHFLEXIBLEOFFSETRANGE.fields_by_name['flex_range_match'])
_ACLMATCHFLEXIBLEOFFSETRANGE.fields_by_name['flex_range_match'].containing_oneof = _ACLMATCHFLEXIBLEOFFSETRANGE.oneofs_by_name['Oneof_AclEntryMatchFlexibleOffsetRange']
_ACLMATCHFLEXIBLEMASK.fields_by_name['start_offset'].enum_type = _ACLENTRYMATCHFLEXSTARTOFFEST
_ACLMATCHFLEXIBLEOFFSETMASK.fields_by_name['flex_mask_match'].message_type = _ACLMATCHFLEXIBLEMASK
_ACLMATCHFLEXIBLEOFFSETMASK.oneofs_by_name['Oneof_AclEntryMatchFlexibleOffsetMask'].fields.append(
  _ACLMATCHFLEXIBLEOFFSETMASK.fields_by_name['flex_mask_match'])
_ACLMATCHFLEXIBLEOFFSETMASK.fields_by_name['flex_mask_match'].containing_oneof = _ACLMATCHFLEXIBLEOFFSETMASK.oneofs_by_name['Oneof_AclEntryMatchFlexibleOffsetMask']
_ACLENTRYMATCHINET.fields_by_name['match_dst_addrs'].message_type = _ACLMATCHIPADDRESS
_ACLENTRYMATCHINET.fields_by_name['match_src_addrs'].message_type = _ACLMATCHIPADDRESS
_ACLENTRYMATCHINET.fields_by_name['match_dst_ports'].message_type = _ACLMATCHPORT
_ACLENTRYMATCHINET.fields_by_name['match_src_ports'].message_type = _ACLMATCHPORT
_ACLENTRYMATCHINET.fields_by_name['match_dscp_code'].message_type = _ACLMATCHDSCPCODE
_ACLENTRYMATCHINET.fields_by_name['match_protocols'].message_type = _ACLMATCHPROTOCOL
_ACLENTRYMATCHINET.fields_by_name['match_icmp_type'].message_type = _ACLMATCHICMPTYPE
_ACLENTRYMATCHINET.fields_by_name['match_icmp_code'].message_type = _ACLMATCHICMPCODE
_ACLENTRYMATCHINET.fields_by_name['match_pkt_len'].message_type = _ACLMATCHPKTLEN
_ACLENTRYMATCHINET.fields_by_name['match_ttl'].message_type = _ACLMATCHTTL
_ACLENTRYMATCHINET.fields_by_name['fragment_flags'].enum_type = _ACLFRAGMENTFLAGS
_ACLENTRYMATCHINET.fields_by_name['match_frag_offset'].message_type = _ACLMATCHFRAGMENTOFFSET
_ACLENTRYMATCHINET.fields_by_name['ifl_names'].message_type = _ACLMATCHIFLNAMEINDEX
_ACLENTRYMATCHINET.fields_by_name['match_ip_precedence'].message_type = _ACLMATCHIPPRECEDENCE
_ACLENTRYMATCHINET.fields_by_name['match_addrs'].message_type = _ACLMATCHIPADDRESS
_ACLENTRYMATCHINET.fields_by_name['match_ports'].message_type = _ACLMATCHPORT
_ACLENTRYMATCHINET.fields_by_name['match_flex_range'].message_type = _ACLMATCHFLEXIBLEOFFSETRANGE
_ACLENTRYMATCHINET.fields_by_name['match_flex_mask'].message_type = _ACLMATCHFLEXIBLEOFFSETMASK
_ACLENTRYINETTERMINATINGACTION.fields_by_name['action_accept'].enum_type = _ACLBOOLEANTYPE
_ACLENTRYINETTERMINATINGACTION.fields_by_name['action_discard'].enum_type = _ACLBOOLEANTYPE
_ACLENTRYINETTERMINATINGACTION.fields_by_name['action_reject'].enum_type = _ACLENTRYACTIONREJECTREASON
_ACLENTRYINETTERMINATINGACTION.fields_by_name['action_rt_inst'].message_type = _ACLACTIONROUTINGINSTANCE
_ACLENTRYINETTERMINATINGACTION.oneofs_by_name['Oneof_AclEntryInetTerminatingAction'].fields.append(
  _ACLENTRYINETTERMINATINGACTION.fields_by_name['action_accept'])
_ACLENTRYINETTERMINATINGACTION.fields_by_name['action_accept'].containing_oneof = _ACLENTRYINETTERMINATINGACTION.oneofs_by_name['Oneof_AclEntryInetTerminatingAction']
_ACLENTRYINETTERMINATINGACTION.oneofs_by_name['Oneof_AclEntryInetTerminatingAction'].fields.append(
  _ACLENTRYINETTERMINATINGACTION.fields_by_name['action_discard'])
_ACLENTRYINETTERMINATINGACTION.fields_by_name['action_discard'].containing_oneof = _ACLENTRYINETTERMINATINGACTION.oneofs_by_name['Oneof_AclEntryInetTerminatingAction']
_ACLENTRYINETTERMINATINGACTION.oneofs_by_name['Oneof_AclEntryInetTerminatingAction'].fields.append(
  _ACLENTRYINETTERMINATINGACTION.fields_by_name['action_reject'])
_ACLENTRYINETTERMINATINGACTION.fields_by_name['action_reject'].containing_oneof = _ACLENTRYINETTERMINATINGACTION.oneofs_by_name['Oneof_AclEntryInetTerminatingAction']
_ACLENTRYINETTERMINATINGACTION.oneofs_by_name['Oneof_AclEntryInetTerminatingAction'].fields.append(
  _ACLENTRYINETTERMINATINGACTION.fields_by_name['action_rt_inst'])
_ACLENTRYINETTERMINATINGACTION.fields_by_name['action_rt_inst'].containing_oneof = _ACLENTRYINETTERMINATINGACTION.oneofs_by_name['Oneof_AclEntryInetTerminatingAction']
_ACLENTRYINETNONTERMINATINGACTION.fields_by_name['action_count'].message_type = _ACLACTIONCOUNTER
_ACLENTRYINETNONTERMINATINGACTION.fields_by_name['action_log'].enum_type = _ACLBOOLEANTYPE
_ACLENTRYINETNONTERMINATINGACTION.fields_by_name['action_syslog'].enum_type = _ACLBOOLEANTYPE
_ACLENTRYINETNONTERMINATINGACTION.fields_by_name['action_policer'].message_type = _ACLACTIONPOLICER
_ACLENTRYINETNONTERMINATINGACTION.fields_by_name['action_sample'].enum_type = _ACLBOOLEANTYPE
_ACLENTRYINETNONTERMINATINGACTION.fields_by_name['action_next_term'].enum_type = _ACLBOOLEANTYPE
_ACLENTRYINETACTION.fields_by_name['actions_nt'].message_type = _ACLENTRYINETNONTERMINATINGACTION
_ACLENTRYINETACTION.fields_by_name['action_t'].message_type = _ACLENTRYINETTERMINATINGACTION
_ACLINETENTRY.fields_by_name['ace_op'].enum_type = _ACLENTRYOPERATION
_ACLINETENTRY.fields_by_name['adjacency'].message_type = _ACLADJACENCY
_ACLINETENTRY.fields_by_name['matches'].message_type = _ACLENTRYMATCHINET
_ACLINETENTRY.fields_by_name['actions'].message_type = _ACLENTRYINETACTION
_ACLENTRY.fields_by_name['inet_entry'].message_type = _ACLINETENTRY
_ACLENTRY.oneofs_by_name['OneOf_AclEntry'].fields.append(
  _ACLENTRY.fields_by_name['inet_entry'])
_ACLENTRY.fields_by_name['inet_entry'].containing_oneof = _ACLENTRY.oneofs_by_name['OneOf_AclEntry']
_ACCESSLIST.fields_by_name['acl_type'].enum_type = _ACCESSLISTTYPES
_ACCESSLIST.fields_by_name['acl_family'].enum_type = _ACCESSLISTFAMILIES
_ACCESSLIST.fields_by_name['acl_flag'].enum_type = _ACCESSLISTFLAGS
_ACCESSLIST.fields_by_name['ace_list'].message_type = _ACLENTRY
_ACCESSLISTCOUNTER.fields_by_name['acl'].message_type = _ACCESSLIST
_ACCESSLISTCOUNTERBULK.fields_by_name['acl'].message_type = _ACCESSLIST
_ACCESSLISTRETURNSTATUS.fields_by_name['status'].enum_type = _ACCESSLISTRETURNVAL
_ACCESSLISTCOUNTERVAL.fields_by_name['status'].enum_type = _ACCESSLISTRETURNVAL
_ACCESSLISTOBJBIND.fields_by_name['acl'].message_type = _ACCESSLIST
_ACCESSLISTOBJBIND.fields_by_name['obj_type'].enum_type = _ACCESSLISTBINDOBJTYPE
_ACCESSLISTOBJBIND.fields_by_name['bind_direction'].enum_type = _ACLBINDDIRECTION
_ACCESSLISTOBJBIND.fields_by_name['bind_family'].enum_type = _ACCESSLISTFAMILIES
DESCRIPTOR.message_types_by_name['AccessListVoid'] = _ACCESSLISTVOID
DESCRIPTOR.message_types_by_name['AclPolicerTwoColor'] = _ACLPOLICERTWOCOLOR
DESCRIPTOR.message_types_by_name['AclPolicerSingleRateThreeColor'] = _ACLPOLICERSINGLERATETHREECOLOR
DESCRIPTOR.message_types_by_name['AclPolicerTwoRateThreeColor'] = _ACLPOLICERTWORATETHREECOLOR
DESCRIPTOR.message_types_by_name['AclPolicerHeirarchical'] = _ACLPOLICERHEIRARCHICAL
DESCRIPTOR.message_types_by_name['AclPolicerParameter'] = _ACLPOLICERPARAMETER
DESCRIPTOR.message_types_by_name['AccessListPolicer'] = _ACCESSLISTPOLICER
DESCRIPTOR.message_types_by_name['AclMatchIpAddress'] = _ACLMATCHIPADDRESS
DESCRIPTOR.message_types_by_name['AclMatchPort'] = _ACLMATCHPORT
DESCRIPTOR.message_types_by_name['AclMatchIpPrecedence'] = _ACLMATCHIPPRECEDENCE
DESCRIPTOR.message_types_by_name['AclMatchDscpCode'] = _ACLMATCHDSCPCODE
DESCRIPTOR.message_types_by_name['AclMatchProtocol'] = _ACLMATCHPROTOCOL
DESCRIPTOR.message_types_by_name['AclMatchIcmpType'] = _ACLMATCHICMPTYPE
DESCRIPTOR.message_types_by_name['AclMatchIcmpCode'] = _ACLMATCHICMPCODE
DESCRIPTOR.message_types_by_name['AclMatchPktLen'] = _ACLMATCHPKTLEN
DESCRIPTOR.message_types_by_name['AclMatchTtl'] = _ACLMATCHTTL
DESCRIPTOR.message_types_by_name['AclMatchFragmentOffset'] = _ACLMATCHFRAGMENTOFFSET
DESCRIPTOR.message_types_by_name['AclActionPolicer'] = _ACLACTIONPOLICER
DESCRIPTOR.message_types_by_name['AclActionCounter'] = _ACLACTIONCOUNTER
DESCRIPTOR.message_types_by_name['AclActionRoutingInstance'] = _ACLACTIONROUTINGINSTANCE
DESCRIPTOR.message_types_by_name['AclAdjacency'] = _ACLADJACENCY
DESCRIPTOR.message_types_by_name['AclMatchIflNameIndex'] = _ACLMATCHIFLNAMEINDEX
DESCRIPTOR.message_types_by_name['AclMatchFlexOffset'] = _ACLMATCHFLEXOFFSET
DESCRIPTOR.message_types_by_name['AclMatchFlexibleRange'] = _ACLMATCHFLEXIBLERANGE
DESCRIPTOR.message_types_by_name['AclMatchFlexibleOffsetRange'] = _ACLMATCHFLEXIBLEOFFSETRANGE
DESCRIPTOR.message_types_by_name['AclMatchFlexibleMask'] = _ACLMATCHFLEXIBLEMASK
DESCRIPTOR.message_types_by_name['AclMatchFlexibleOffsetMask'] = _ACLMATCHFLEXIBLEOFFSETMASK
DESCRIPTOR.message_types_by_name['AclEntryMatchInet'] = _ACLENTRYMATCHINET
DESCRIPTOR.message_types_by_name['AclEntryInetTerminatingAction'] = _ACLENTRYINETTERMINATINGACTION
DESCRIPTOR.message_types_by_name['AclEntryInetNonTerminatingAction'] = _ACLENTRYINETNONTERMINATINGACTION
DESCRIPTOR.message_types_by_name['AclEntryInetAction'] = _ACLENTRYINETACTION
DESCRIPTOR.message_types_by_name['AclInetEntry'] = _ACLINETENTRY
DESCRIPTOR.message_types_by_name['AclEntry'] = _ACLENTRY
DESCRIPTOR.message_types_by_name['AccessList'] = _ACCESSLIST
DESCRIPTOR.message_types_by_name['AccessListCounter'] = _ACCESSLISTCOUNTER
DESCRIPTOR.message_types_by_name['AccessListCounterBulk'] = _ACCESSLISTCOUNTERBULK
DESCRIPTOR.message_types_by_name['AccessListReturnStatus'] = _ACCESSLISTRETURNSTATUS
DESCRIPTOR.message_types_by_name['AccessListCounterVal'] = _ACCESSLISTCOUNTERVAL
DESCRIPTOR.message_types_by_name['AccessListObjBind'] = _ACCESSLISTOBJBIND
DESCRIPTOR.enum_types_by_name['AclBooleanType'] = _ACLBOOLEANTYPE
DESCRIPTOR.enum_types_by_name['AclMatchOperation'] = _ACLMATCHOPERATION
DESCRIPTOR.enum_types_by_name['AclPolicerType'] = _ACLPOLICERTYPE
DESCRIPTOR.enum_types_by_name['AclPolicerFlags'] = _ACLPOLICERFLAGS
DESCRIPTOR.enum_types_by_name['AclPolicerRate'] = _ACLPOLICERRATE
DESCRIPTOR.enum_types_by_name['AclPolicerBurstSize'] = _ACLPOLICERBURSTSIZE
DESCRIPTOR.enum_types_by_name['AclColorModeType'] = _ACLCOLORMODETYPE
DESCRIPTOR.enum_types_by_name['AclLossPriority'] = _ACLLOSSPRIORITY
DESCRIPTOR.enum_types_by_name['AclEntryActionRejectReason'] = _ACLENTRYACTIONREJECTREASON
DESCRIPTOR.enum_types_by_name['AclFragmentFlags'] = _ACLFRAGMENTFLAGS
DESCRIPTOR.enum_types_by_name['Precedence'] = _PRECEDENCE
DESCRIPTOR.enum_types_by_name['AclEntryOperation'] = _ACLENTRYOPERATION
DESCRIPTOR.enum_types_by_name['AclAdjacencyType'] = _ACLADJACENCYTYPE
DESCRIPTOR.enum_types_by_name['AclEntryMatchFlexStartOffest'] = _ACLENTRYMATCHFLEXSTARTOFFEST
DESCRIPTOR.enum_types_by_name['AccessListTypes'] = _ACCESSLISTTYPES
DESCRIPTOR.enum_types_by_name['AccessListFamilies'] = _ACCESSLISTFAMILIES
DESCRIPTOR.enum_types_by_name['AccessListFlags'] = _ACCESSLISTFLAGS
DESCRIPTOR.enum_types_by_name['AclBindDirection'] = _ACLBINDDIRECTION
DESCRIPTOR.enum_types_by_name['AccessListReturnVal'] = _ACCESSLISTRETURNVAL
DESCRIPTOR.enum_types_by_name['AccessListBindObjType'] = _ACCESSLISTBINDOBJTYPE

AccessListVoid = _reflection.GeneratedProtocolMessageType('AccessListVoid', (_message.Message,), dict(
  DESCRIPTOR = _ACCESSLISTVOID,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AccessListVoid)
  ))
_sym_db.RegisterMessage(AccessListVoid)

AclPolicerTwoColor = _reflection.GeneratedProtocolMessageType('AclPolicerTwoColor', (_message.Message,), dict(
  DESCRIPTOR = _ACLPOLICERTWOCOLOR,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclPolicerTwoColor)
  ))
_sym_db.RegisterMessage(AclPolicerTwoColor)

AclPolicerSingleRateThreeColor = _reflection.GeneratedProtocolMessageType('AclPolicerSingleRateThreeColor', (_message.Message,), dict(
  DESCRIPTOR = _ACLPOLICERSINGLERATETHREECOLOR,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclPolicerSingleRateThreeColor)
  ))
_sym_db.RegisterMessage(AclPolicerSingleRateThreeColor)

AclPolicerTwoRateThreeColor = _reflection.GeneratedProtocolMessageType('AclPolicerTwoRateThreeColor', (_message.Message,), dict(
  DESCRIPTOR = _ACLPOLICERTWORATETHREECOLOR,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclPolicerTwoRateThreeColor)
  ))
_sym_db.RegisterMessage(AclPolicerTwoRateThreeColor)

AclPolicerHeirarchical = _reflection.GeneratedProtocolMessageType('AclPolicerHeirarchical', (_message.Message,), dict(
  DESCRIPTOR = _ACLPOLICERHEIRARCHICAL,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclPolicerHeirarchical)
  ))
_sym_db.RegisterMessage(AclPolicerHeirarchical)

AclPolicerParameter = _reflection.GeneratedProtocolMessageType('AclPolicerParameter', (_message.Message,), dict(
  DESCRIPTOR = _ACLPOLICERPARAMETER,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclPolicerParameter)
  ))
_sym_db.RegisterMessage(AclPolicerParameter)

AccessListPolicer = _reflection.GeneratedProtocolMessageType('AccessListPolicer', (_message.Message,), dict(
  DESCRIPTOR = _ACCESSLISTPOLICER,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AccessListPolicer)
  ))
_sym_db.RegisterMessage(AccessListPolicer)

AclMatchIpAddress = _reflection.GeneratedProtocolMessageType('AclMatchIpAddress', (_message.Message,), dict(
  DESCRIPTOR = _ACLMATCHIPADDRESS,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclMatchIpAddress)
  ))
_sym_db.RegisterMessage(AclMatchIpAddress)

AclMatchPort = _reflection.GeneratedProtocolMessageType('AclMatchPort', (_message.Message,), dict(
  DESCRIPTOR = _ACLMATCHPORT,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclMatchPort)
  ))
_sym_db.RegisterMessage(AclMatchPort)

AclMatchIpPrecedence = _reflection.GeneratedProtocolMessageType('AclMatchIpPrecedence', (_message.Message,), dict(
  DESCRIPTOR = _ACLMATCHIPPRECEDENCE,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclMatchIpPrecedence)
  ))
_sym_db.RegisterMessage(AclMatchIpPrecedence)

AclMatchDscpCode = _reflection.GeneratedProtocolMessageType('AclMatchDscpCode', (_message.Message,), dict(
  DESCRIPTOR = _ACLMATCHDSCPCODE,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclMatchDscpCode)
  ))
_sym_db.RegisterMessage(AclMatchDscpCode)

AclMatchProtocol = _reflection.GeneratedProtocolMessageType('AclMatchProtocol', (_message.Message,), dict(
  DESCRIPTOR = _ACLMATCHPROTOCOL,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclMatchProtocol)
  ))
_sym_db.RegisterMessage(AclMatchProtocol)

AclMatchIcmpType = _reflection.GeneratedProtocolMessageType('AclMatchIcmpType', (_message.Message,), dict(
  DESCRIPTOR = _ACLMATCHICMPTYPE,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclMatchIcmpType)
  ))
_sym_db.RegisterMessage(AclMatchIcmpType)

AclMatchIcmpCode = _reflection.GeneratedProtocolMessageType('AclMatchIcmpCode', (_message.Message,), dict(
  DESCRIPTOR = _ACLMATCHICMPCODE,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclMatchIcmpCode)
  ))
_sym_db.RegisterMessage(AclMatchIcmpCode)

AclMatchPktLen = _reflection.GeneratedProtocolMessageType('AclMatchPktLen', (_message.Message,), dict(
  DESCRIPTOR = _ACLMATCHPKTLEN,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclMatchPktLen)
  ))
_sym_db.RegisterMessage(AclMatchPktLen)

AclMatchTtl = _reflection.GeneratedProtocolMessageType('AclMatchTtl', (_message.Message,), dict(
  DESCRIPTOR = _ACLMATCHTTL,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclMatchTtl)
  ))
_sym_db.RegisterMessage(AclMatchTtl)

AclMatchFragmentOffset = _reflection.GeneratedProtocolMessageType('AclMatchFragmentOffset', (_message.Message,), dict(
  DESCRIPTOR = _ACLMATCHFRAGMENTOFFSET,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclMatchFragmentOffset)
  ))
_sym_db.RegisterMessage(AclMatchFragmentOffset)

AclActionPolicer = _reflection.GeneratedProtocolMessageType('AclActionPolicer', (_message.Message,), dict(
  DESCRIPTOR = _ACLACTIONPOLICER,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclActionPolicer)
  ))
_sym_db.RegisterMessage(AclActionPolicer)

AclActionCounter = _reflection.GeneratedProtocolMessageType('AclActionCounter', (_message.Message,), dict(
  DESCRIPTOR = _ACLACTIONCOUNTER,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclActionCounter)
  ))
_sym_db.RegisterMessage(AclActionCounter)

AclActionRoutingInstance = _reflection.GeneratedProtocolMessageType('AclActionRoutingInstance', (_message.Message,), dict(
  DESCRIPTOR = _ACLACTIONROUTINGINSTANCE,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclActionRoutingInstance)
  ))
_sym_db.RegisterMessage(AclActionRoutingInstance)

AclAdjacency = _reflection.GeneratedProtocolMessageType('AclAdjacency', (_message.Message,), dict(
  DESCRIPTOR = _ACLADJACENCY,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclAdjacency)
  ))
_sym_db.RegisterMessage(AclAdjacency)

AclMatchIflNameIndex = _reflection.GeneratedProtocolMessageType('AclMatchIflNameIndex', (_message.Message,), dict(
  DESCRIPTOR = _ACLMATCHIFLNAMEINDEX,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclMatchIflNameIndex)
  ))
_sym_db.RegisterMessage(AclMatchIflNameIndex)

AclMatchFlexOffset = _reflection.GeneratedProtocolMessageType('AclMatchFlexOffset', (_message.Message,), dict(
  DESCRIPTOR = _ACLMATCHFLEXOFFSET,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclMatchFlexOffset)
  ))
_sym_db.RegisterMessage(AclMatchFlexOffset)

AclMatchFlexibleRange = _reflection.GeneratedProtocolMessageType('AclMatchFlexibleRange', (_message.Message,), dict(
  DESCRIPTOR = _ACLMATCHFLEXIBLERANGE,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclMatchFlexibleRange)
  ))
_sym_db.RegisterMessage(AclMatchFlexibleRange)

AclMatchFlexibleOffsetRange = _reflection.GeneratedProtocolMessageType('AclMatchFlexibleOffsetRange', (_message.Message,), dict(
  DESCRIPTOR = _ACLMATCHFLEXIBLEOFFSETRANGE,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclMatchFlexibleOffsetRange)
  ))
_sym_db.RegisterMessage(AclMatchFlexibleOffsetRange)

AclMatchFlexibleMask = _reflection.GeneratedProtocolMessageType('AclMatchFlexibleMask', (_message.Message,), dict(
  DESCRIPTOR = _ACLMATCHFLEXIBLEMASK,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclMatchFlexibleMask)
  ))
_sym_db.RegisterMessage(AclMatchFlexibleMask)

AclMatchFlexibleOffsetMask = _reflection.GeneratedProtocolMessageType('AclMatchFlexibleOffsetMask', (_message.Message,), dict(
  DESCRIPTOR = _ACLMATCHFLEXIBLEOFFSETMASK,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclMatchFlexibleOffsetMask)
  ))
_sym_db.RegisterMessage(AclMatchFlexibleOffsetMask)

AclEntryMatchInet = _reflection.GeneratedProtocolMessageType('AclEntryMatchInet', (_message.Message,), dict(
  DESCRIPTOR = _ACLENTRYMATCHINET,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclEntryMatchInet)
  ))
_sym_db.RegisterMessage(AclEntryMatchInet)

AclEntryInetTerminatingAction = _reflection.GeneratedProtocolMessageType('AclEntryInetTerminatingAction', (_message.Message,), dict(
  DESCRIPTOR = _ACLENTRYINETTERMINATINGACTION,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclEntryInetTerminatingAction)
  ))
_sym_db.RegisterMessage(AclEntryInetTerminatingAction)

AclEntryInetNonTerminatingAction = _reflection.GeneratedProtocolMessageType('AclEntryInetNonTerminatingAction', (_message.Message,), dict(
  DESCRIPTOR = _ACLENTRYINETNONTERMINATINGACTION,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclEntryInetNonTerminatingAction)
  ))
_sym_db.RegisterMessage(AclEntryInetNonTerminatingAction)

AclEntryInetAction = _reflection.GeneratedProtocolMessageType('AclEntryInetAction', (_message.Message,), dict(
  DESCRIPTOR = _ACLENTRYINETACTION,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclEntryInetAction)
  ))
_sym_db.RegisterMessage(AclEntryInetAction)

AclInetEntry = _reflection.GeneratedProtocolMessageType('AclInetEntry', (_message.Message,), dict(
  DESCRIPTOR = _ACLINETENTRY,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclInetEntry)
  ))
_sym_db.RegisterMessage(AclInetEntry)

AclEntry = _reflection.GeneratedProtocolMessageType('AclEntry', (_message.Message,), dict(
  DESCRIPTOR = _ACLENTRY,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AclEntry)
  ))
_sym_db.RegisterMessage(AclEntry)

AccessList = _reflection.GeneratedProtocolMessageType('AccessList', (_message.Message,), dict(
  DESCRIPTOR = _ACCESSLIST,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AccessList)
  ))
_sym_db.RegisterMessage(AccessList)

AccessListCounter = _reflection.GeneratedProtocolMessageType('AccessListCounter', (_message.Message,), dict(
  DESCRIPTOR = _ACCESSLISTCOUNTER,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AccessListCounter)
  ))
_sym_db.RegisterMessage(AccessListCounter)

AccessListCounterBulk = _reflection.GeneratedProtocolMessageType('AccessListCounterBulk', (_message.Message,), dict(
  DESCRIPTOR = _ACCESSLISTCOUNTERBULK,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AccessListCounterBulk)
  ))
_sym_db.RegisterMessage(AccessListCounterBulk)

AccessListReturnStatus = _reflection.GeneratedProtocolMessageType('AccessListReturnStatus', (_message.Message,), dict(
  DESCRIPTOR = _ACCESSLISTRETURNSTATUS,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AccessListReturnStatus)
  ))
_sym_db.RegisterMessage(AccessListReturnStatus)

AccessListCounterVal = _reflection.GeneratedProtocolMessageType('AccessListCounterVal', (_message.Message,), dict(
  DESCRIPTOR = _ACCESSLISTCOUNTERVAL,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AccessListCounterVal)
  ))
_sym_db.RegisterMessage(AccessListCounterVal)

AccessListObjBind = _reflection.GeneratedProtocolMessageType('AccessListObjBind', (_message.Message,), dict(
  DESCRIPTOR = _ACCESSLISTOBJBIND,
  __module__ = 'firewall_service_pb2'
  # @@protoc_insertion_point(class_scope:acl.AccessListObjBind)
  ))
_sym_db.RegisterMessage(AccessListObjBind)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class AclServiceStub(object):
  """
  ACL Service APIs defines a set of simple RPCs to operate upon the various
  components, viz. 
  - ACL
  - ACE
  - Policer
  - Attachment Points
  - Statistics.

  Each of RPCs are named by concatenating the corresponding Acl object and the operation 
  to be performed. This give a easy to understand semantics to the RPCs.


  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.AccessListAdd = channel.unary_unary(
        '/acl.AclService/AccessListAdd',
        request_serializer=AccessList.SerializeToString,
        response_deserializer=AccessListReturnStatus.FromString,
        )
    self.AccessListDelete = channel.unary_unary(
        '/acl.AclService/AccessListDelete',
        request_serializer=AccessList.SerializeToString,
        response_deserializer=AccessListReturnStatus.FromString,
        )
    self.AccessListChange = channel.unary_unary(
        '/acl.AclService/AccessListChange',
        request_serializer=AccessList.SerializeToString,
        response_deserializer=AccessListReturnStatus.FromString,
        )
    self.AccessListBindAdd = channel.unary_unary(
        '/acl.AclService/AccessListBindAdd',
        request_serializer=AccessListObjBind.SerializeToString,
        response_deserializer=AccessListReturnStatus.FromString,
        )
    self.AccessListBindDelete = channel.unary_unary(
        '/acl.AclService/AccessListBindDelete',
        request_serializer=AccessListObjBind.SerializeToString,
        response_deserializer=AccessListReturnStatus.FromString,
        )
    self.AccessListPolicerAdd = channel.unary_unary(
        '/acl.AclService/AccessListPolicerAdd',
        request_serializer=AccessListPolicer.SerializeToString,
        response_deserializer=AccessListReturnStatus.FromString,
        )
    self.AccessListPolicerReplace = channel.unary_unary(
        '/acl.AclService/AccessListPolicerReplace',
        request_serializer=AccessListPolicer.SerializeToString,
        response_deserializer=AccessListReturnStatus.FromString,
        )
    self.AccessListPolicerDelete = channel.unary_unary(
        '/acl.AclService/AccessListPolicerDelete',
        request_serializer=AccessListPolicer.SerializeToString,
        response_deserializer=AccessListReturnStatus.FromString,
        )
    self.AccessListPileupStart = channel.unary_unary(
        '/acl.AclService/AccessListPileupStart',
        request_serializer=AccessListVoid.SerializeToString,
        response_deserializer=AccessListReturnStatus.FromString,
        )
    self.AccessListPileupEnd = channel.unary_unary(
        '/acl.AclService/AccessListPileupEnd',
        request_serializer=AccessListVoid.SerializeToString,
        response_deserializer=AccessListReturnStatus.FromString,
        )
    self.AccessListCounterGet = channel.unary_unary(
        '/acl.AclService/AccessListCounterGet',
        request_serializer=AccessListCounter.SerializeToString,
        response_deserializer=AccessListCounterVal.FromString,
        )
    self.AccessListPolicerCounterGet = channel.unary_unary(
        '/acl.AclService/AccessListPolicerCounterGet',
        request_serializer=AccessListCounter.SerializeToString,
        response_deserializer=AccessListCounterVal.FromString,
        )
    self.AccessListCounterClear = channel.unary_unary(
        '/acl.AclService/AccessListCounterClear',
        request_serializer=AccessListCounter.SerializeToString,
        response_deserializer=AccessListReturnStatus.FromString,
        )
    self.AccessListCounterBulkGet = channel.unary_stream(
        '/acl.AclService/AccessListCounterBulkGet',
        request_serializer=AccessListCounterBulk.SerializeToString,
        response_deserializer=AccessListCounterVal.FromString,
        )
    self.AccessListPolicerCounterBulkGet = channel.unary_stream(
        '/acl.AclService/AccessListPolicerCounterBulkGet',
        request_serializer=AccessListCounterBulk.SerializeToString,
        response_deserializer=AccessListCounterVal.FromString,
        )


class AclServiceServicer(object):
  """
  ACL Service APIs defines a set of simple RPCs to operate upon the various
  components, viz. 
  - ACL
  - ACE
  - Policer
  - Attachment Points
  - Statistics.

  Each of RPCs are named by concatenating the corresponding Acl object and the operation 
  to be performed. This give a easy to understand semantics to the RPCs.


  """

  def AccessListAdd(self, request, context):
    """Adds an ACL and returns the result.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AccessListDelete(self, request, context):
    """Delete an ACL from the system and return the result.
    For successful delete to happen, the ACL should not be bound to any object.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AccessListChange(self, request, context):
    """Changes an ACL based on the list of ACL entries provided, and returns the result.
    It is advisable to use this API to for small incremental changes. For wholesale 
    changes, it is recommended to use the 'Replace' version of the API.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AccessListBindAdd(self, request, context):
    """Add a binding of an ACL with a bind object and return the result.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AccessListBindDelete(self, request, context):
    """Deletes a binding of an ACL with a bind object and return the result.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AccessListPolicerAdd(self, request, context):
    """Adds a policer and returns the result.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AccessListPolicerReplace(self, request, context):
    """Changes a policer and returns the result.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AccessListPolicerDelete(self, request, context):
    """Deletes a policer and returns the result.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AccessListPileupStart(self, request, context):
    """Following are optimized command to let the server know to <br>
    accumulate the Access List Entries and configure on when AccessListPileupEnd is received. <br>
    For every AccessList RPC invocation, the entire ACL is applied to the system <br>
    For application which wants to do batching for better performance, the AccessListPileupStart <br>
    and AccessListPileupEnd will help achive that.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AccessListPileupEnd(self, request, context):
    """Following are optimized command to let the server know to <br>
    accumulate the ace_list and configure on when AccessListPileupEnd is received. <br>
    For every AccessList RPC invocation, the entire ACL is applied to the system <br>
    For application which wants to do batching for better performance, the AccessListPileupStart <br>
    and AccessListPileupEnd will help achive that.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AccessListCounterGet(self, request, context):
    """Few points to note with this API. 
    The call is going to be blocking for worst case of 10 seconds which is non configurable.
    The counter name is expected to be fully resolved. For eg. for term specific policer counter
    it is expected to be passed to full counter name.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AccessListPolicerCounterGet(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AccessListCounterClear(self, request, context):
    """Clears a particular counter whose fully qualified name is provided,  associated with an ACL.
    Few points to note with this API. Currently only 1 counter get is supported.
    The counter name is expected to be fully resolved. For eg. for term specific policer counter
    it is expected to be passed to full counter name.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AccessListCounterBulkGet(self, request, context):
    """Get all the counters associated with an ACL.
    Each call to this API will return 10 counters from the starting_index specified in AccessListCounterBulk message.
    The client is expected to run this API in loop which should stop in either one of the following condition:
    a. The targeted number of counters are retrieved.
    b. An error is returned.
    c. The API returns less than 10 counters.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AccessListPolicerCounterBulkGet(self, request, context):
    """Get all the policer counters associated with an ACL.
    Each call to this API will return 10 counters from the starting_index specified in AccessListCounterBulk message.
    The client is expected to run this API in loop which should stop in either one of the following condition:
    a. The targeted number of counters are retrieved.
    b. An error is returned.
    c. The API returns less than 10 counters.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AclServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'AccessListAdd': grpc.unary_unary_rpc_method_handler(
          servicer.AccessListAdd,
          request_deserializer=AccessList.FromString,
          response_serializer=AccessListReturnStatus.SerializeToString,
      ),
      'AccessListDelete': grpc.unary_unary_rpc_method_handler(
          servicer.AccessListDelete,
          request_deserializer=AccessList.FromString,
          response_serializer=AccessListReturnStatus.SerializeToString,
      ),
      'AccessListChange': grpc.unary_unary_rpc_method_handler(
          servicer.AccessListChange,
          request_deserializer=AccessList.FromString,
          response_serializer=AccessListReturnStatus.SerializeToString,
      ),
      'AccessListBindAdd': grpc.unary_unary_rpc_method_handler(
          servicer.AccessListBindAdd,
          request_deserializer=AccessListObjBind.FromString,
          response_serializer=AccessListReturnStatus.SerializeToString,
      ),
      'AccessListBindDelete': grpc.unary_unary_rpc_method_handler(
          servicer.AccessListBindDelete,
          request_deserializer=AccessListObjBind.FromString,
          response_serializer=AccessListReturnStatus.SerializeToString,
      ),
      'AccessListPolicerAdd': grpc.unary_unary_rpc_method_handler(
          servicer.AccessListPolicerAdd,
          request_deserializer=AccessListPolicer.FromString,
          response_serializer=AccessListReturnStatus.SerializeToString,
      ),
      'AccessListPolicerReplace': grpc.unary_unary_rpc_method_handler(
          servicer.AccessListPolicerReplace,
          request_deserializer=AccessListPolicer.FromString,
          response_serializer=AccessListReturnStatus.SerializeToString,
      ),
      'AccessListPolicerDelete': grpc.unary_unary_rpc_method_handler(
          servicer.AccessListPolicerDelete,
          request_deserializer=AccessListPolicer.FromString,
          response_serializer=AccessListReturnStatus.SerializeToString,
      ),
      'AccessListPileupStart': grpc.unary_unary_rpc_method_handler(
          servicer.AccessListPileupStart,
          request_deserializer=AccessListVoid.FromString,
          response_serializer=AccessListReturnStatus.SerializeToString,
      ),
      'AccessListPileupEnd': grpc.unary_unary_rpc_method_handler(
          servicer.AccessListPileupEnd,
          request_deserializer=AccessListVoid.FromString,
          response_serializer=AccessListReturnStatus.SerializeToString,
      ),
      'AccessListCounterGet': grpc.unary_unary_rpc_method_handler(
          servicer.AccessListCounterGet,
          request_deserializer=AccessListCounter.FromString,
          response_serializer=AccessListCounterVal.SerializeToString,
      ),
      'AccessListPolicerCounterGet': grpc.unary_unary_rpc_method_handler(
          servicer.AccessListPolicerCounterGet,
          request_deserializer=AccessListCounter.FromString,
          response_serializer=AccessListCounterVal.SerializeToString,
      ),
      'AccessListCounterClear': grpc.unary_unary_rpc_method_handler(
          servicer.AccessListCounterClear,
          request_deserializer=AccessListCounter.FromString,
          response_serializer=AccessListReturnStatus.SerializeToString,
      ),
      'AccessListCounterBulkGet': grpc.unary_stream_rpc_method_handler(
          servicer.AccessListCounterBulkGet,
          request_deserializer=AccessListCounterBulk.FromString,
          response_serializer=AccessListCounterVal.SerializeToString,
      ),
      'AccessListPolicerCounterBulkGet': grpc.unary_stream_rpc_method_handler(
          servicer.AccessListPolicerCounterBulkGet,
          request_deserializer=AccessListCounterBulk.FromString,
          response_serializer=AccessListCounterVal.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'acl.AclService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaAclServiceServicer(object):
  """
  ACL Service APIs defines a set of simple RPCs to operate upon the various
  components, viz. 
  - ACL
  - ACE
  - Policer
  - Attachment Points
  - Statistics.

  Each of RPCs are named by concatenating the corresponding Acl object and the operation 
  to be performed. This give a easy to understand semantics to the RPCs.


  """
  def AccessListAdd(self, request, context):
    """Adds an ACL and returns the result.
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def AccessListDelete(self, request, context):
    """Delete an ACL from the system and return the result.
    For successful delete to happen, the ACL should not be bound to any object.
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def AccessListChange(self, request, context):
    """Changes an ACL based on the list of ACL entries provided, and returns the result.
    It is advisable to use this API to for small incremental changes. For wholesale 
    changes, it is recommended to use the 'Replace' version of the API.
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def AccessListBindAdd(self, request, context):
    """Add a binding of an ACL with a bind object and return the result.
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def AccessListBindDelete(self, request, context):
    """Deletes a binding of an ACL with a bind object and return the result.
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def AccessListPolicerAdd(self, request, context):
    """Adds a policer and returns the result.
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def AccessListPolicerReplace(self, request, context):
    """Changes a policer and returns the result.
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def AccessListPolicerDelete(self, request, context):
    """Deletes a policer and returns the result.
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def AccessListPileupStart(self, request, context):
    """Following are optimized command to let the server know to <br>
    accumulate the Access List Entries and configure on when AccessListPileupEnd is received. <br>
    For every AccessList RPC invocation, the entire ACL is applied to the system <br>
    For application which wants to do batching for better performance, the AccessListPileupStart <br>
    and AccessListPileupEnd will help achive that.

    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def AccessListPileupEnd(self, request, context):
    """Following are optimized command to let the server know to <br>
    accumulate the ace_list and configure on when AccessListPileupEnd is received. <br>
    For every AccessList RPC invocation, the entire ACL is applied to the system <br>
    For application which wants to do batching for better performance, the AccessListPileupStart <br>
    and AccessListPileupEnd will help achive that.

    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def AccessListCounterGet(self, request, context):
    """Few points to note with this API. 
    The call is going to be blocking for worst case of 10 seconds which is non configurable.
    The counter name is expected to be fully resolved. For eg. for term specific policer counter
    it is expected to be passed to full counter name.

    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def AccessListPolicerCounterGet(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def AccessListCounterClear(self, request, context):
    """Clears a particular counter whose fully qualified name is provided,  associated with an ACL.
    Few points to note with this API. Currently only 1 counter get is supported.
    The counter name is expected to be fully resolved. For eg. for term specific policer counter
    it is expected to be passed to full counter name.

    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def AccessListCounterBulkGet(self, request, context):
    """Get all the counters associated with an ACL.
    Each call to this API will return 10 counters from the starting_index specified in AccessListCounterBulk message.
    The client is expected to run this API in loop which should stop in either one of the following condition:
    a. The targeted number of counters are retrieved.
    b. An error is returned.
    c. The API returns less than 10 counters.

    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def AccessListPolicerCounterBulkGet(self, request, context):
    """Get all the policer counters associated with an ACL.
    Each call to this API will return 10 counters from the starting_index specified in AccessListCounterBulk message.
    The client is expected to run this API in loop which should stop in either one of the following condition:
    a. The targeted number of counters are retrieved.
    b. An error is returned.
    c. The API returns less than 10 counters.

    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaAclServiceStub(object):
  """
  ACL Service APIs defines a set of simple RPCs to operate upon the various
  components, viz. 
  - ACL
  - ACE
  - Policer
  - Attachment Points
  - Statistics.

  Each of RPCs are named by concatenating the corresponding Acl object and the operation 
  to be performed. This give a easy to understand semantics to the RPCs.


  """
  def AccessListAdd(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Adds an ACL and returns the result.
    """
    raise NotImplementedError()
  AccessListAdd.future = None
  def AccessListDelete(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Delete an ACL from the system and return the result.
    For successful delete to happen, the ACL should not be bound to any object.
    """
    raise NotImplementedError()
  AccessListDelete.future = None
  def AccessListChange(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Changes an ACL based on the list of ACL entries provided, and returns the result.
    It is advisable to use this API to for small incremental changes. For wholesale 
    changes, it is recommended to use the 'Replace' version of the API.
    """
    raise NotImplementedError()
  AccessListChange.future = None
  def AccessListBindAdd(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Add a binding of an ACL with a bind object and return the result.
    """
    raise NotImplementedError()
  AccessListBindAdd.future = None
  def AccessListBindDelete(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Deletes a binding of an ACL with a bind object and return the result.
    """
    raise NotImplementedError()
  AccessListBindDelete.future = None
  def AccessListPolicerAdd(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Adds a policer and returns the result.
    """
    raise NotImplementedError()
  AccessListPolicerAdd.future = None
  def AccessListPolicerReplace(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Changes a policer and returns the result.
    """
    raise NotImplementedError()
  AccessListPolicerReplace.future = None
  def AccessListPolicerDelete(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Deletes a policer and returns the result.
    """
    raise NotImplementedError()
  AccessListPolicerDelete.future = None
  def AccessListPileupStart(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Following are optimized command to let the server know to <br>
    accumulate the Access List Entries and configure on when AccessListPileupEnd is received. <br>
    For every AccessList RPC invocation, the entire ACL is applied to the system <br>
    For application which wants to do batching for better performance, the AccessListPileupStart <br>
    and AccessListPileupEnd will help achive that.

    """
    raise NotImplementedError()
  AccessListPileupStart.future = None
  def AccessListPileupEnd(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Following are optimized command to let the server know to <br>
    accumulate the ace_list and configure on when AccessListPileupEnd is received. <br>
    For every AccessList RPC invocation, the entire ACL is applied to the system <br>
    For application which wants to do batching for better performance, the AccessListPileupStart <br>
    and AccessListPileupEnd will help achive that.

    """
    raise NotImplementedError()
  AccessListPileupEnd.future = None
  def AccessListCounterGet(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Few points to note with this API. 
    The call is going to be blocking for worst case of 10 seconds which is non configurable.
    The counter name is expected to be fully resolved. For eg. for term specific policer counter
    it is expected to be passed to full counter name.

    """
    raise NotImplementedError()
  AccessListCounterGet.future = None
  def AccessListPolicerCounterGet(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  AccessListPolicerCounterGet.future = None
  def AccessListCounterClear(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Clears a particular counter whose fully qualified name is provided,  associated with an ACL.
    Few points to note with this API. Currently only 1 counter get is supported.
    The counter name is expected to be fully resolved. For eg. for term specific policer counter
    it is expected to be passed to full counter name.

    """
    raise NotImplementedError()
  AccessListCounterClear.future = None
  def AccessListCounterBulkGet(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Get all the counters associated with an ACL.
    Each call to this API will return 10 counters from the starting_index specified in AccessListCounterBulk message.
    The client is expected to run this API in loop which should stop in either one of the following condition:
    a. The targeted number of counters are retrieved.
    b. An error is returned.
    c. The API returns less than 10 counters.

    """
    raise NotImplementedError()
  def AccessListPolicerCounterBulkGet(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Get all the policer counters associated with an ACL.
    Each call to this API will return 10 counters from the starting_index specified in AccessListCounterBulk message.
    The client is expected to run this API in loop which should stop in either one of the following condition:
    a. The targeted number of counters are retrieved.
    b. An error is returned.
    c. The API returns less than 10 counters.

    """
    raise NotImplementedError()


def beta_create_AclService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('acl.AclService', 'AccessListAdd'): AccessList.FromString,
    ('acl.AclService', 'AccessListBindAdd'): AccessListObjBind.FromString,
    ('acl.AclService', 'AccessListBindDelete'): AccessListObjBind.FromString,
    ('acl.AclService', 'AccessListChange'): AccessList.FromString,
    ('acl.AclService', 'AccessListCounterBulkGet'): AccessListCounterBulk.FromString,
    ('acl.AclService', 'AccessListCounterClear'): AccessListCounter.FromString,
    ('acl.AclService', 'AccessListCounterGet'): AccessListCounter.FromString,
    ('acl.AclService', 'AccessListDelete'): AccessList.FromString,
    ('acl.AclService', 'AccessListPileupEnd'): AccessListVoid.FromString,
    ('acl.AclService', 'AccessListPileupStart'): AccessListVoid.FromString,
    ('acl.AclService', 'AccessListPolicerAdd'): AccessListPolicer.FromString,
    ('acl.AclService', 'AccessListPolicerCounterBulkGet'): AccessListCounterBulk.FromString,
    ('acl.AclService', 'AccessListPolicerCounterGet'): AccessListCounter.FromString,
    ('acl.AclService', 'AccessListPolicerDelete'): AccessListPolicer.FromString,
    ('acl.AclService', 'AccessListPolicerReplace'): AccessListPolicer.FromString,
  }
  response_serializers = {
    ('acl.AclService', 'AccessListAdd'): AccessListReturnStatus.SerializeToString,
    ('acl.AclService', 'AccessListBindAdd'): AccessListReturnStatus.SerializeToString,
    ('acl.AclService', 'AccessListBindDelete'): AccessListReturnStatus.SerializeToString,
    ('acl.AclService', 'AccessListChange'): AccessListReturnStatus.SerializeToString,
    ('acl.AclService', 'AccessListCounterBulkGet'): AccessListCounterVal.SerializeToString,
    ('acl.AclService', 'AccessListCounterClear'): AccessListReturnStatus.SerializeToString,
    ('acl.AclService', 'AccessListCounterGet'): AccessListCounterVal.SerializeToString,
    ('acl.AclService', 'AccessListDelete'): AccessListReturnStatus.SerializeToString,
    ('acl.AclService', 'AccessListPileupEnd'): AccessListReturnStatus.SerializeToString,
    ('acl.AclService', 'AccessListPileupStart'): AccessListReturnStatus.SerializeToString,
    ('acl.AclService', 'AccessListPolicerAdd'): AccessListReturnStatus.SerializeToString,
    ('acl.AclService', 'AccessListPolicerCounterBulkGet'): AccessListCounterVal.SerializeToString,
    ('acl.AclService', 'AccessListPolicerCounterGet'): AccessListCounterVal.SerializeToString,
    ('acl.AclService', 'AccessListPolicerDelete'): AccessListReturnStatus.SerializeToString,
    ('acl.AclService', 'AccessListPolicerReplace'): AccessListReturnStatus.SerializeToString,
  }
  method_implementations = {
    ('acl.AclService', 'AccessListAdd'): face_utilities.unary_unary_inline(servicer.AccessListAdd),
    ('acl.AclService', 'AccessListBindAdd'): face_utilities.unary_unary_inline(servicer.AccessListBindAdd),
    ('acl.AclService', 'AccessListBindDelete'): face_utilities.unary_unary_inline(servicer.AccessListBindDelete),
    ('acl.AclService', 'AccessListChange'): face_utilities.unary_unary_inline(servicer.AccessListChange),
    ('acl.AclService', 'AccessListCounterBulkGet'): face_utilities.unary_stream_inline(servicer.AccessListCounterBulkGet),
    ('acl.AclService', 'AccessListCounterClear'): face_utilities.unary_unary_inline(servicer.AccessListCounterClear),
    ('acl.AclService', 'AccessListCounterGet'): face_utilities.unary_unary_inline(servicer.AccessListCounterGet),
    ('acl.AclService', 'AccessListDelete'): face_utilities.unary_unary_inline(servicer.AccessListDelete),
    ('acl.AclService', 'AccessListPileupEnd'): face_utilities.unary_unary_inline(servicer.AccessListPileupEnd),
    ('acl.AclService', 'AccessListPileupStart'): face_utilities.unary_unary_inline(servicer.AccessListPileupStart),
    ('acl.AclService', 'AccessListPolicerAdd'): face_utilities.unary_unary_inline(servicer.AccessListPolicerAdd),
    ('acl.AclService', 'AccessListPolicerCounterBulkGet'): face_utilities.unary_stream_inline(servicer.AccessListPolicerCounterBulkGet),
    ('acl.AclService', 'AccessListPolicerCounterGet'): face_utilities.unary_unary_inline(servicer.AccessListPolicerCounterGet),
    ('acl.AclService', 'AccessListPolicerDelete'): face_utilities.unary_unary_inline(servicer.AccessListPolicerDelete),
    ('acl.AclService', 'AccessListPolicerReplace'): face_utilities.unary_unary_inline(servicer.AccessListPolicerReplace),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_AclService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('acl.AclService', 'AccessListAdd'): AccessList.SerializeToString,
    ('acl.AclService', 'AccessListBindAdd'): AccessListObjBind.SerializeToString,
    ('acl.AclService', 'AccessListBindDelete'): AccessListObjBind.SerializeToString,
    ('acl.AclService', 'AccessListChange'): AccessList.SerializeToString,
    ('acl.AclService', 'AccessListCounterBulkGet'): AccessListCounterBulk.SerializeToString,
    ('acl.AclService', 'AccessListCounterClear'): AccessListCounter.SerializeToString,
    ('acl.AclService', 'AccessListCounterGet'): AccessListCounter.SerializeToString,
    ('acl.AclService', 'AccessListDelete'): AccessList.SerializeToString,
    ('acl.AclService', 'AccessListPileupEnd'): AccessListVoid.SerializeToString,
    ('acl.AclService', 'AccessListPileupStart'): AccessListVoid.SerializeToString,
    ('acl.AclService', 'AccessListPolicerAdd'): AccessListPolicer.SerializeToString,
    ('acl.AclService', 'AccessListPolicerCounterBulkGet'): AccessListCounterBulk.SerializeToString,
    ('acl.AclService', 'AccessListPolicerCounterGet'): AccessListCounter.SerializeToString,
    ('acl.AclService', 'AccessListPolicerDelete'): AccessListPolicer.SerializeToString,
    ('acl.AclService', 'AccessListPolicerReplace'): AccessListPolicer.SerializeToString,
  }
  response_deserializers = {
    ('acl.AclService', 'AccessListAdd'): AccessListReturnStatus.FromString,
    ('acl.AclService', 'AccessListBindAdd'): AccessListReturnStatus.FromString,
    ('acl.AclService', 'AccessListBindDelete'): AccessListReturnStatus.FromString,
    ('acl.AclService', 'AccessListChange'): AccessListReturnStatus.FromString,
    ('acl.AclService', 'AccessListCounterBulkGet'): AccessListCounterVal.FromString,
    ('acl.AclService', 'AccessListCounterClear'): AccessListReturnStatus.FromString,
    ('acl.AclService', 'AccessListCounterGet'): AccessListCounterVal.FromString,
    ('acl.AclService', 'AccessListDelete'): AccessListReturnStatus.FromString,
    ('acl.AclService', 'AccessListPileupEnd'): AccessListReturnStatus.FromString,
    ('acl.AclService', 'AccessListPileupStart'): AccessListReturnStatus.FromString,
    ('acl.AclService', 'AccessListPolicerAdd'): AccessListReturnStatus.FromString,
    ('acl.AclService', 'AccessListPolicerCounterBulkGet'): AccessListCounterVal.FromString,
    ('acl.AclService', 'AccessListPolicerCounterGet'): AccessListCounterVal.FromString,
    ('acl.AclService', 'AccessListPolicerDelete'): AccessListReturnStatus.FromString,
    ('acl.AclService', 'AccessListPolicerReplace'): AccessListReturnStatus.FromString,
  }
  cardinalities = {
    'AccessListAdd': cardinality.Cardinality.UNARY_UNARY,
    'AccessListBindAdd': cardinality.Cardinality.UNARY_UNARY,
    'AccessListBindDelete': cardinality.Cardinality.UNARY_UNARY,
    'AccessListChange': cardinality.Cardinality.UNARY_UNARY,
    'AccessListCounterBulkGet': cardinality.Cardinality.UNARY_STREAM,
    'AccessListCounterClear': cardinality.Cardinality.UNARY_UNARY,
    'AccessListCounterGet': cardinality.Cardinality.UNARY_UNARY,
    'AccessListDelete': cardinality.Cardinality.UNARY_UNARY,
    'AccessListPileupEnd': cardinality.Cardinality.UNARY_UNARY,
    'AccessListPileupStart': cardinality.Cardinality.UNARY_UNARY,
    'AccessListPolicerAdd': cardinality.Cardinality.UNARY_UNARY,
    'AccessListPolicerCounterBulkGet': cardinality.Cardinality.UNARY_STREAM,
    'AccessListPolicerCounterGet': cardinality.Cardinality.UNARY_UNARY,
    'AccessListPolicerDelete': cardinality.Cardinality.UNARY_UNARY,
    'AccessListPolicerReplace': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'acl.AclService', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
